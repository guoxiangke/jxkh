<?php

//https://jxkh.manageprojects.com/projects/307web/tasks/3
// 医生群体关注
define('SBQ_CENTER_NODE_LIMIT', 1);
define('SBQ_CENTER_NODE_TYPE', 'sbq_center');

/**
 * Implements hook_node_access().
 */
function sbq_center_node_access($node, $op, $account) {
  //$limit_content_type = 'sbq_center';
  if ($op == 'create' && $node == SBQ_CENTER_NODE_TYPE && current_path() == "node/add/" . SBQ_CENTER_NODE_TYPE) {
    $node_count = db_query('SELECT nid FROM {node} WHERE type = :type AND uid = :uid', array( ':type' => SBQ_CENTER_NODE_TYPE, ':uid' => $account->uid ))->rowCount();
    if ($node_count >= SBQ_CENTER_NODE_LIMIT) {
      // drupal_set_message(t("Your can't create antoher page of !type",array('!type'=>$limit_content_type)), 'status', FALSE);
      drupal_set_message(t("The page your are creating was limitd!"), 'status', FALSE);
      return NODE_ACCESS_DENY;
    }
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_block_info().
 * This hook declares what blocks are provided by the module.
 */
function sbq_center_block_info() {
  $blocks['sbq_center_ask'] = array(
      'info' => t('Center: sbq ask form'),
      'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );
  return $blocks;
}

function sbq_center_block_view($delta = '') {
  switch ($delta) {
    case 'sbq_center_ask':
      $block['subject'] = '';
      $block['content'] = _sbq_center_block_html($delta);
      break;
  }
  return isset($block) ? $block : '';
}

function _sbq_center_block_html($delta) {
  global $user;
  switch ($delta) {
    case 'sbq_center_ask':
      if ($user->uid) {
        module_load_include('inc', 'node', 'node.pages');
        drupal_add_js(drupal_get_path('module', 'sbq_center') . '/js/sbq_center.js');
        $node = (object) array(
                'uid' => $user->uid,
                'name' => (isset($user->name) ? $user->name : ''),
                'type' => 'question',
                'language' => LANGUAGE_NONE
        );
        $question_node_form = drupal_get_form('question_node_form', $node);
        $block_html = '<div id="sbq-center-ask-form">'
            . render($question_node_form)
            . '</div>';
      } else {
        $block_html = '<div id="sbq-center-need-login">'
            . '<span>请' . l('登录', 'user/login') . '或' . l('注册', 'customer/register') . '后，进行提问。' . l('点击注册', 'customer/register') . '</span>'
            . '</div>';
      }
      break;
    default:
      break;
  }
  return isset($block_html) ? $block_html : '';
}

/**
 * Implements hook_form_alter().
 */
function sbq_center_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['comment_body'])) {
    $form['comment_body'][LANGUAGE_NONE][0]['#title'] = t('Comment');
  }
  if (isset($form['body'])) {
    $form['body'][LANGUAGE_NONE][0]['#title'] = t('Body');
  }
  if (isset($form['field_tags'])) {
    $form['field_tags'][LANGUAGE_NONE]['#title'] = t('Tags');
  }
  if (isset($form['field_image'])) {
    $form['field_image'][LANGUAGE_NONE]['#title'] = t('image');
  }
  switch ($form_id) {
    case 'question_node_form':
      // $form['title']['#access'] = FALSE;
      $p_nid = arg(1);
      if (isset($p_nid) && $p_nid > 0) { // Ask form for Center
        $p_node = node_load($p_nid);
        $p_type = $p_node->type;
        if ($p_type == 'sbq_center') {
          $form['body']['und']['0']['#title'] = t('问答');
          $form['field_tags']['und']['#value'] = '中心问答';
          // $form['actions']['submit']['#submit'][] = 'sbq_center_ask_form_submit';
          // unset($form['#validate']);
          // unset($form['#submit']);
          // unset($form['body']['und']['0']['format']);
          // unset($form['body']['und']['0']['summary']);
          // $form['actions']['submit'] = array(
          //     '#type' => 'submit',
          //     '#value' => '提问',
          //     //'#attributes' => array('class'=>'use-ajax'),
          //     '#ajax' => array(
          //         'callback' => 'ajax_center_ask_callback',
          //         'wrapper' => 'question-node-form',
          //         'method' => 'replace',
          //         'effect' => 'fade',
          //         'progress' => array( 'type' => 'throbber', 'message' => '请稍候' ),
          //     ),
          // );
        }
      }
      break;
    case 'sbq_center_edu_node_form' :
      $parm = drupal_get_query_parameters();
      if (isset($parm['og_group_ref']) && $node = sbq_center_load($parm['og_group_ref'])) {
        $form['og_group_ref']['und'][0]['default'][0]['target_id']['#default_value'] = "$node->title ($node->nid)";
        $form['og_group_ref'][LANGUAGE_NONE]['#default_value'] = $node->nid;
       // $form['og_group_ref'][LANGUAGE_NONE]['#attributes']['disabled'] = TRUE;
      }
      break;
    default:
      break;
  }
}

function sbq_center_ask_form_submit($form, &$form_state) {
  $form_state['redirect'] = FALSE;
}

/*
 * ajax_center_ask_callback
 */

function ajax_center_ask_callback($form, &$form_state) {
  $body = $form_state['input']['body']['und'][0]['value'];
  if (isset($body) && strlen(trim($body)) > 0) {
    $commands = array();
    module_load_include('inc', 'node', 'node.pages');
    $node = node_form_submit_build_node($form, $form_state);
    $insert = empty($node->nid);
    node_save($node);
    $node_link = l(t('view'), 'node/' . $node->nid);
    $watchdog_args = array(
        '@type' => $node->type,
        '%title' => $node->title,
    );

    if ($insert) {
      watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    }
    if ($node->nid) {
      $form_state['values']['nid'] = $node->nid;
      $form_state['nid'] = $node->nid;
      $title = l($node->title, 'node/' . $node->nid);
      $str_date = format_date(time(), 'custom', 'Y-m-d');
      $nqs = '<div class="views-row views-row-1 views-row-odd views-row-first">'
          . '<div class="views-field views-field-title"><span class="field-content">' . $title . '</span></div>'
          . '<div class="views-field views-field-field-mark-question-resolved"><div class="field-content">未解决</div></div>'
          . '<div class="views-field views-field-created"><span class="field-content">' . $str_date . '</span></div></div>';
      $success_msg = '<div id="sbq-message-status" class="messages--status messages status sbq-message">'
          . '<h2 class="element-invisible">状态消息</h2>'
          . '<pre>' . $node->title . ' 已经提交给中心</pre></div>';
      $new_textarea = '<textarea class="text-full ckeditor-mod form-textarea" id="edit-body-und-0-value" name="body[und][0][value]" cols="60" rows="20"></textarea>';
      $commands[] = ajax_command_replace('#edit-body-und-0-value', $new_textarea);
      $commands[] = ajax_command_prepend('#sbq-center-ask-form', $success_msg);
      $commands[] = ajax_command_prepend('#block-views-my-qa-center-new .view-content', $nqs);
      // $commands[] = ajax_command_replace('#sbq-message-error', '');
    } else {
      // In the unlikely case something went wrong on save, the node will be
      // rebuilt and node form redisplayed the same way as in preview.
      drupal_set_message(t('The post could not be saved.'), 'error');
      $form_state['rebuild'] = TRUE;
    }
  } else {
    $error_msg = '<div id="sbq-message-error" class="messages--error messages error sbq-message">'
        . '<h2 class="element-invisible">错误信息</h2>'
        . '<ul class="messages__list">'
        . '<li class="messages__item">请输入您的问题</li>'
        . '</ul></div>';
    $commands[] = ajax_command_prepend('#sbq-center-ask-form', $error_msg);
    $form_state['rebuild'] = TRUE;
  }

  $page = array(
      '#type' => 'ajax',
      '#commands' => $commands );
  ajax_deliver($page);
}

/**
 * get sbq center node by user
 * @global type $user
 * @param type $account one of array(account,uid,null)
 * @return type node object
 */
function sbq_center_get_center_by_user($account = null) {
  if (!$account) {
    global $user;
    $account = $user;
  } else if (!is_object($account)) {
    $obj = new stdClass();
    $obj->uid = $account;
    $account = $obj;
  }
  $nodes = node_load_multiple(array(), array( 'type' => SBQ_CENTER_NODE_TYPE, 'uid' => $account->uid, 'status' => 1 ));
  return reset($nodes);
}

/**
 *  get sbq center node
 * @param type $nid one of array(null,nid)
 * @return type node object
 * @throws Exception
 */
function sbq_center_load($nid) {
  if ($node = node_load($nid)) {
    if ($node->type != SBQ_CENTER_NODE_TYPE) {
      return null;
    }
  } else {
    return null;
  }
  return $node;
}

function sbq_center_group_post($centerid = NULL) {
  if (is_object($centerid)) {
    $center = $centerid;
  } else {
    $center = sbq_center_load($centerid);
  }
  if (!$center) {
    return array();
  }
}

/**
 * Add content to the view thread page.
 *
 * @param $content
 *   Render-able array, contains the thread object in #thread.
 */
function sbq_center_privatemsg_view_alter(&$content) {
  $content['messages'] = array_reverse($content['messages']);
}
/*
* get current user's center nid.
*
*/

function _sbq_center_nid_get($account = NULL) {
  if(!$account) {
    global $user;
    $account = $user;
  }
  if($center_nid = variable_get('center_'.$account->uid)) return $center_nid;
  if(!array_key_exists(USER_CENTER_ADMINSTRATOR_RID, $account->roles))return FALSE;
  $result = db_query("SELECT node.nid FROM {node} node WHERE (( (node.uid = :uid) AND (node.status = '1') AND (node.type IN  ('sbq_center')) ))",array(':uid' => $account->uid));
  $record = $result->fetchField();
  variable_set('center_'.$account->uid, $record);
  return $record;
}

function _sbq_center_expert_nid_get($center_nid = 0) {
  if ($center_nid == 0) {
    $expert_nid =  0;
  }
  $expert_nid = variable_get('center_'.$center_nid.'_expert_nid');
  if($expert_nid) {
    return $expert_nid;
  } else {
    $expert_nid =  0;
    $query = db_select('node', 'n');
    $query->join('field_data_field_center_taxonomy', 't', 't.entity_id=n.nid');
    $query->join('og_membership', 'm', 'm.etid=n.nid');
    $query->fields('n', array('nid'));
    $query->condition('t.entity_type', 'node','=');
    $query->condition('t.deleted', '0');
    $query->condition('t.field_center_taxonomy_tid', '24749','=');
    $query->condition('m.entity_type', 'node','=');
    $query->condition('m.gid', $center_nid,'=');
    $query->condition('n.status', 1,'=');
    $query->condition('n.type', 'center_notice','=');
    $query->orderBy('n.created', 'DESC');
    $query->range(0, 1);
    $query->execute();
    $expert_nid = $query->execute()->fetchField();
    variable_set('center_'.$center_nid.'_expert_nid', $expert_nid);
  }
  return $expert_nid;
}

function _sbq_center_get_nid_by_node($nid = 0) {
  if ($nid == 0) {
    $center_nid =  0;
  }
  $center_nid = variable_get('question_'.$nid.'_center_nid');
  if($center_nid) {
    return $center_nid;
  } else {
    $center_nid =  0;
    $node = node_load($nid);
    if (isset($node->og_group_ref['und'][0]['target_id'])) {
      $center_nid = $node->og_group_ref['und'][0]['target_id'];
    }
    variable_set('question_'.$nid.'_center_nid', $center_nid);
  }
  return $center_nid;
}

/**
 * Implements hook_node_delete().
 */
function sbq_center_node_delete($node) {
  if($node->type == 'sbq_center') {
    variable_del('center_'.$node->uid);
  }
}

/**
 * Implements hook_node_update().
 */
function sbq_center_node_update($node) {
  variable_set('center_'.$node->uid, $node->nid);
}

/**
 * Implements hook_user_delete().
 */
function sbq_center_user_delete($account) {
  if(variable_get('center_'.$account->uid)) {
    variable_del('center_'.$account->uid);
  }
}

/**
 * Implements hook_menu().
 */
function sbq_center_menu() {
  $items['center/%node/info'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(1),
    // The page callback also invokes drupal_set_title() in case
    // the menu router's title is overridden by a menu link.
    'page callback' => 'node_page_view4sbq_center',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
  );
  return $items;
}

/**
 * This is for empty page for center/%node/info
 */
function node_page_view4sbq_center() {
  //show blocks only in this url
  return '';
}

/**
 * get the pm thread_id between give user & the center user
 */
function _sbq_get_pm_thread_id_to_sbqcenter($center_account_uid, $account = NULL) {
  if(!$account) {
    global $user;
    $account = $user;
  }
  $thread_id = NULL;
  $thread_id = db_query('SELECT pi.thread_id FROM {pm_index} pi where pi.recipient = :center_uid AND pi.mid in ( SELECT pm.mid FROM {pm_message} pm WHERE pm.author = :uid)',array(':center_uid'=>$center_account_uid,':uid'=>$account->uid))->fetchField();
  return $thread_id;
}

<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
define('SBQ_CENTER_RESERVATION_NODE_TYPE', 'sbq_center_reservation');
define('SBQ_CENTER_RESERVATION_STATUS_SUBMMIT', 0);
define('SBQ_CENTER_RESERVATION_STATUS_ACCEPT', 1);
define('SBQ_CENTER_RESERVATION_STATUS_IGNORE', 2);

/**
 * hook  menu
 * @return array
 */
function sbq_center_reservation_menu() {
  $items['center/%sbq_center/reservation/settings'] = array(
      'title' => '设置接诊日期',
      'page callback' => 'drupal_get_form',
      'page arguments' => array( 'sbq_center_opendays_form', 1 ),
      'access callback' => 'sbq_center_reservation_access',
      'access arguments' => array( 1, NULL, 'setting center reservation' ),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'sbq_center_reservation.inc'
  );
  $items['center/%sbq_center/reservation/add'] = array(
      'title' => '预约',
      'page callback' => 'sbq_center_reservation_add',
      'page arguments' => array( 1, 'add' ),
      'access callback' => 'sbq_center_reservation_access',
      'access arguments' => array( 2, NULL, 'add' ),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'sbq_center_reservation.inc'
  );

  foreach (array( 'accept', 'ignore' ) as $key => $value) {
    $items['center/%sbq_center/reservation/%sbq_center_reservation/' . $value] = array(
        'title' => '预约',
        'page callback' => 'sbq_center_reservation_manage',
        'page arguments' => array( 1, 3, 4 ),
        'access callback' => 'sbq_center_reservation_access',
        'access arguments' => array( 1, 3, 'manage center reservation' ),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'sbq_center_reservation.inc'
    );
  }

  $items['center/%sbq_center/reservation/created'] = array(
      'title' => '创建预约',
      'page callback' => 'sbq_center_reservation_created',
      'page arguments' => array( 1 ),
      'access callback' => 'sbq_center_reservation_access',
      'access arguments' => array( 1, NULL, 'create sbq_center_reservation content' ),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'sbq_center_reservation.inc'
  );
  return $items;
}

/**
 * Implements hook_og_permission().
 */
function sbq_center_reservation_og_permission() {
  $items['add center reservation'] = array(
      'title' => t('提交表单预约'),
      'description' => t('拥有此权限，可以提交预约表单.'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );
  $items['manage center reservation'] = array(
      'title' => t('管理中心预约表单'),
      'description' => t('管理中心预约表单，更新状态，删除表单.'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );
  $items['cancel own center reservation'] = array(
      'title' => t('取消自己的预约表单'),
      'description' => t('取消自己的预约表单.'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );
  $items['setting center reservation'] = array(
      'title' => t('设置中心预约'),
      'description' => t('可以设置预约时间.'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );
  return $items;
}

function sbq_center_reservation_access($center, $reservation = NULL, $type = NULL, $account = NULL) {

  global $user;
  if (!$account) {
    $account = $user;
  }
  if (!og_user_access('node', $center->nid, $type, $account)) {
    return FALSE;
  }
  switch ($type) {
    case 'cancel own center reservation':
      return $reservation->uid == $account->uid;
      break;
    default:
      break;
  }


  return TRUE;
}

function sbq_center_reservation_load($rid) {
  if (!$reservation = node_load($rid)) {
    return NULL;
  }
  return $reservation->type == SBQ_CENTER_RESERVATION_NODE_TYPE ? $reservation : NULL;
}

/**
 * get reservation settings
 * @param type $type
 */
function sbq_center_reservation_setopenday($centerid, $opendays) {
  if (!$center_node = sbq_center_load($centerid)) {
    throw new Exception("The parameter {$center_node} is not Center Node");
  }
}

function sbq_center_reservation_get_settings($center) {
  static $center_reservation_opendays = array();
  $center = sbq_center_load($center);

  if (!$vari = variable_get('center_reservation_' . $center->nid . '_settings')) {
    return array();
  }
  $center_reservation_opendays[$center->nid] = unserialize($vari);
  return $center_reservation_opendays[$center->nid];
}

function sbq_center_reservation_theme_registry_alter(&$theme_registry) {
  if (arg(2) == 'reservation') {
    $theme_registry['calendar_month_col']['path'] = drupal_get_path('module', 'sbq_center_reservation');
    $theme_registry['calendar_month_col']['template'] = '/templates/' . $theme_registry['calendar_month_col']['template'];
    $theme_registry['calendar_month_col']['preprocess functions'][] = 'template_preprocess_sbq_center_reservation_month_col';

    $theme_registry['calendar_item']['path'] = drupal_get_path('module', 'sbq_center_reservation');
    $theme_registry['calendar_item']['template'] = '/templates/' . $theme_registry['calendar_item']['template'];
    $theme_registry['calendar_item']['preprocess functions'][] = 'template_preprocess_sbq_center_reservation_item';
  }
}

/**
 * @see template_preprocess_calendar_item()
 * @param type $vars
 */
function template_preprocess_sbq_center_reservation_item(&$vars) {
  if (isset($vars['rendered_fields'])) {
    $vars['rendered_fields'] = array();
  }
}

function template_preprocess_sbq_center_reservation_month_col(&$vars) {
  // dpm($vars);
}

/**
 * 
 * @param type $date
 * @param type $center
 * @return boolean
 */
function sbq_center_reservation_can_reservation($date, $center = '', $display=FALSE) {
  if (!$center) {
    $center = arg(1);
  }

  if (is_array($date)) {
    $date = $date['date'];
    $time = $date['time'];
  } else {
    $datetime = new DateTime($date);
    $date = date('Y-m-d', $datetime->getTimestamp());
    $time = date('H', $datetime->getTimestamp());
  }
  $settings = sbq_center_reservation_get_settings($center);
  $week_index = date_day_of_week($date);
  $week = array(
      'sunday',
      'monday',
      'tuesday',
      'wednesday',
      'thursday',
      'friday',
      'saturday',
  );
  if (strtotime($date) < time()) {
    return FALSE;
  }

  $reservation = $settings['opendays'][$week[$week_index]];
  //dpm($reservation);

  if ( isset($reservation['a']) && $reservation['a']) {
    if ($time > 9 && $time < 12) {
      return true;
    }
  }
  if ( isset($reservation['p']) && $reservation['p']) {
    if ($time > 13 && $time < 18) {
      return true;
    }
  }
  if($display){
    return isset($reservation['a']) && $reservation['a'] || isset($reservation['p']) && $reservation['p'];
  }
  return FALSE;
}

/*
 * hook_form_alter
 */

function sbq_center_reservation_form_alter(&$form, $form_states) {
  if (isset($form['#bundle']) && $form['#bundle'] == SBQ_CENTER_RESERVATION_NODE_TYPE && arg(0)!='admin') {
    $form['#validate'][] = 'sbq_center_reservation_form_validate';
  }
}

/*
 * sbq center reservation validate
 */

function sbq_center_reservation_form_validate($form, &$form_states) {
  // file_put_contents('/home/chechao/1.log', $form_states['values']['field_node_ref']['und'][0]['target_id']);
  $c = sbq_center_reservation_can_reservation($form_states['values']['field_reservation_time']['und'][0]['value'], $form_states['values']['og_group_ref']['und'][0]['target_id']);

  if (!$c) {
    form_set_error('field_reservation_time ', '您输入的预约时间不能预约');
  }
}

/**
 * get reservation node of one center
 * @param type $centerids
 */
function sbq_center_reservation_fetch_by_center($centerid) {
  if (!$center = sbq_center_load($centerid)) {
    throw new Exception("the center $centerid is not center");
  }

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', SBQ_CENTER_RESERVATION_NODE_TYPE)
      ->fieldCondition('og_group_ref', 'target_id', $center->nid)
      ->execute();
  if (!isset($result['node'])) {
    return FALSE;
  }
  $reservationid = reset(array_keys($result['node']));
  return node_load($reservationid);
}

function sbq_center_reservation_node_submit($node, $form, $form_state) {

}

/**
 * 
 * @param type $uid
 * @param type $nid
 * @param array $parameters array(target_id ,pagesize)
 */
function sbq_center_reservation_get_reservation($uid = '', $nid = '', array $parameters) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', SBQ_CENTER_RESERVATION_NODE_TYPE);
  if ($uid) {
    $query->propertyCondition('uid', $uid);
  }
  if ($nid) {
    $query->propertyCondition('nid', $nid);
  }
  if (in_array('target_id', array_keys($parameters))) {
    $query->fieldCondition('node_ref', 'target_id', $parameters['target_id']);
  }
  if (in_array('page', array_keys($parameters))) {
    $query->range($parameters['page']['page'] * $parameters['page']['pagesize'], $parameters['page']['pagesize']);
  }
  $query->propertyOrderBy('created', 'DESC');

  $result = $query->execute();
  if (!isset($result['node'])) {
    return array();
  }
  return node_load_multiple(array_keys($result['node']));
}

function sbq_center_reservation_get_manage_item($row) {
  $centerid = arg(1);
  $accept = $ignore = '';
  switch ($row->field_field_reservation_status[0]['raw']['value']) {
    case SBQ_CENTER_RESERVATION_STATUS_SUBMMIT:
      $accept = l('接受', "center/{$centerid}/reservation/{$row->nid}/accept");
      $ignore = l('删除', "center/{$centerid}/reservation/{$row->nid}/ignore");
      break;
    case SBQ_CENTER_RESERVATION_STATUS_ACCEPT:
      // $accept = l('接受', "center/{$centerid}/reservation/{$row->nid}/accept");
      $accept = '';
      $ignore = l('删除', "center/{$centerid}/reservation/{$row->nid}/ignore");
      break;
  }
  return $accept . ' ' . $ignore;
}

/*
 * 
 */

function sbq_center_reservation_reservation_status_alter($reservation) {
  if ($reservation->field_reservation_status['und'][0]['value'] == SBQ_CENTER_RESERVATION_STATUS_ACCEPT) {
    global $user;
    $date = new DateTime($reservation->field_reservation_time['und'][0]['value']);
    $message = message_create('sbq_center_reservation_accept', array(
        'arguments' => array( '!time' => date('Y-m-d', $date->getTimestamp()) )
        ), user_load($reservation->uid));

    $warpper = entity_metadata_wrapper('message', $message);

    $warpper->field_node_ref->set(node_load($reservation->og_group_ref['und'][0]['target_id']));
    $warpper->field_center_reservation_send->set($user->uid);
    $warpper->save();
  }
}

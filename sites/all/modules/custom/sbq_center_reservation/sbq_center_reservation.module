<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * 预约门诊类型
 */
define('SBQ_CENTER_RESERVATION_TYPE_OUTPATIMENT', 0);
/**
 * 预约电话类型
 */
define('SBQ_CENTER_RESERVATION_TYPE_PHONE', 1);
/**
 * 预约
 */
define('SBQ_CENTER_RESERVATION_STATUS_PRE', 0);
/**
 * 接受
 */
define('SBQ_CENTER_RESERVATION_STATUS_REQ', 1);
/**
 * 忽略
 */
define('SBQ_CENTER_RESERVATION_STATUS_IGN', 2);

/**
 * hook menu
 */
function sbq_center_reservation_menu() {
  $items['node/%/reservation/%'] = array(
      'page callback' => 'sbq_center_reservation',
      'page arguments' => array( 1, 3 ),
      'access callback' => 'sbq_center_reservation_access',
      'access arguments' => array( 'form', NULL ),
      'file' => 'sbq_center_reservation.inc',
      'type' => MENU_CALLBACK,
  );

  $items['node/%/reservation/manage'] = array(
      'page callback' => 'sbq_center_reservation_manage',
      'page arguments' => array( 1 ),
      'access callback' => 'sbq_center_reservation_access',
      'access arguments' => array( 'manage', NULL ),
      'file' => 'sbq_center_reservation.inc',
      'type' => MENU_CALLBACK,
  );

  foreach (array( 'accept', 'ignore' ) as $key => $value) {
    $items['node/%/reservation/%/action/' . $value] = array(
        'page callback' => 'sbq_center_reservation_action',
        'page arguments' => array( 1, 3, $value ),
        'access callback' => 'sbq_center_reservation_access',
        'access arguments' => array( $value, NULL ),
        'file' => 'sbq_center_reservation.inc',
        'type' => MENU_CALLBACK,
    );
  }
  $items['node/%/reservation/%/action'] = array(
      'page callback' => 'sbq_center_reservation_accept',
      'page arguments' => array( 1, 3 ),
      'access callback' => 'sbq_center_reservation_access',
      'access arguments' => array( 'accept', NULL ),
      'file' => 'sbq_center_reservation.inc',
      'type' => MENU_CALLBACK,
  );

//  $items['node/%/reservation/%/ignore'] = array(
//      'page callback' => 'sbq_center_reservation_ignore',
//      'page arguments' => array( 1, 3 ),
//      'access callback' => 'sbq_center_reservation_access',
//      'access arguments' => array( 'ignore', NULL ),
//      'file' => 'sbq_center_reservation.inc',
//      'type' => MENU_CALLBACK,
//  );

  return $items;
}

function sbq_center_reservation_access($type, $account = NULL) {
  return TRUE;
}

/**
 * hook_reservation_form_alter
 * 
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function sbq_center_reservation_form_alter(&$form, $form_state, $form_id) {
  global $user;
  if (strpos($form_id, 'webform_client_form_') !== FALSE) {
    if (isset($form['submitted']['sbq_center_category']) && $user->uid != 1) {
      $form['submitted']['sbq_center_category']['#access'] = FALSE;
      $form['submitted']['center_status']['#access'] = FALSE;
    }
  }
//  if (strpos($form_id, 'webform_client_form_') !== FALSE) {
//    $nid = str_replace('webform_client_form_', '', $form_id);
//    if ($nid == SBQ_CENTER_RESERVATION_NODE_ID) {
//      if ($sbq_center = sbq_center_get_center()) {
//        $form['submitted']['sbq_center_id']['#value'] = $sbq_center->nid;
//        $form['submitted']['sbq_center_formcategory']['#value'] = SBQ_CENTER_RESERVATION_TYPE_OUTPATIMENT;
//      }
//    }
//  }
}

/**
 * fetch center reservation form by center node id or arg(1)
 * @param type $sbq_center_reservation_type in SBQ_CENTER_RESERVATION_TYPE_OUTPATIMENT, SBQ_CENTER_RESERVATION_TYPE_PHONE
 * @param type $centerid center node id or arg(1) or center node
 * @return type form
 */
function sbq_center_reservation_sheet($sbq_center_reservation_type, $centerid = NULL) {
  if ($sbq_center = sbq_center_reservation_node_by_center($centerid)) {
    $node = node_load($sbq_center->nid);
    webform_node_view($node, 'full');
    $webform = $node->content['webform'];
    $webform['submitted']['sbq_center_category']['#value'] = $sbq_center_reservation_type;
  }
  return isset($webform) ? $webform : '';
}

/**
 *  hook_webform_submission_insert
 * @param type $node
 * @param type $submission
 */
function sbq_center_reservation_webform_submission_insert($node, $submission) {
  if (!module_exists('message')) {
    return;
  }
  if (!message_type_load('sbq_center_reservation1')) {
//    global $language;
//    $values['message_text'][$language->lanauage][0]['value'] = 'valuess';
//    $values['language'] = $language->lanauage;
//    $type = message_type_create('sbq_center_reservation2', $values);
//    $type->save();
  }
  global $user;
  $message = message_create('sbq_center_reservation_accept', array(), $user);
  $warpper = entity_metadata_wrapper('message', $message);
  $warpper->field_node_ref->set($node);
  $warpper->save();
}

/**
 * Implements hook_og_permission().
 */
function sbq_center_reservation_og_permission() {
  $items = array();

  $items['access all center reservation results'] = array(
      'title' => t('Access all center reservation results in group'),
      'description' => t('Grants access to the "Results" tab on all reservation in this group. Generally a group admin permission.'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['edit all center reservation submissions'] = array(
      'title' => t('Edit all center reservation submissions in group'),
      'description' => t('Allows editing of any center reservation submission by any user in this group. Generally a group admin permission.'),
      'roles' => array( OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['delete all center reservation submissions'] = array(
      'title' => t('Delete all center reservation submissions in group'),
      'description' => t('Allows deleting of any center reservation submission by any user in this group. Generally a group admin permission.'),
      'roles' => array( OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['access own center reservation submissions'] = array(
      'title' => t('Access own center reservation submissions'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['edit own center reservation submissions'] = array(
      'title' => t('Edit own center reservation submissions'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['delete own center reservation submissions'] = array(
      'title' => t('Delete own center reservation submissions'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  return $items;
}

/**
 * Implements hook_webform_submission_access().
 *
 * @see webform_submission_access()
 */
function sbq_center_reservation_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;
  // If this webform is not in a group, don't affect access.
  if (empty($node->og_group_ref['und'])) {
    return;
  }

  $access_all = FALSE;
  $access_own_submission = FALSE;
  foreach ($node->og_group_ref['und'] as $group) {
    // Determine if the user has access to all results and submissions.
    if (og_user_access('node', $group['target_id'], 'access all center reservation results', $account)) {
      $access_all = TRUE;
      break; // If we access to everything, "access own" doesn't matter.
    }

    // Or check if they have access to just their own submissions.
    if (isset($submission) && og_user_access('node', $group['target_id'], 'access own center reservation submissions', $account) && (($account->uid && $account->uid == $submission->uid) || isset($_SESSION['webform_submission'][$submission->sid]))) {
      $access_own_submission = TRUE;
    }
  }

  // Access to any operation (view/edit/delete) requires access permission.
  $general_access = $access_all || $access_own_submission;

  switch ($op) {
    case 'view':
      return $general_access;
    case 'save':
      // The "save" case tells Webform to save a session for anonymous users if
      // they have permission to access their own permissions.
      return og_user_access('node', $group['target_id'], 'access own center reservation submissions', $account);
    case 'list':

      $f = og_user_access('node', $group['target_id'], 'access all center reservation results', $account) || (og_user_access('node', $group['target_id'], 'access own center reservation submissions', $account) && ($account->uid || isset($_SESSION['webform_submission'])));
      return true;
    case 'edit':
      if ($general_access) {
        foreach ($node->og_group_ref['und'] as $group) {
          if (og_user_access('node', $group['target_id'], 'edit all center reservation submissions', $account) || (og_user_access('node', $group['target_id'], 'edit own center reservation submissions', $account) && $submission->uid == $account->uid)) {
            return TRUE;
          }
        }
      }
      break;
    case 'delete':
      if ($general_access) {
        foreach ($node->og_group_ref['und'] as $group) {
          if (og_user_access('node', $group['target_id'], 'delete all center reservation submissions', $account) || (og_user_access('node', $group['target_id'], 'delete own center reservation submissions', $account) && $submission->uid == $account->uid)) {
            return TRUE;
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_webform_results_access().
 */
function sbq_center_reservation_webform_results_access($node, $account = NULL) {
  // If this webform is not in a group, don't affect access.
  if (empty($node->og_group_ref['und'])) {
    return;
  }
  foreach ($node->og_group_ref['und'] as $group) {
    if (og_user_access('node', $group['target_id'], 'access all center reservation results', $account)) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_webform_results_clear_access().
 */
function sbq_center_reservation_webform_results_clear_access($node, $account = NULL) {
  if (empty($node->og_group_ref['und'])) {
    return;
  }

  foreach ($node->og_group_ref['und'] as $group) {
    if (og_user_access('node', $group['target_id'], 'delete all center reservation submissions', $account)) {
      return sbq_center_reservation_webform_results_access($node, $account);
    }
  }
}

/**
 * hook_node_insert
 * after create center create center reservation
 * @param type $node
 * @return type
 */
function sbq_center_reservation_node_insert($node) {
  if (!isset($node->type) || $node->type != SBQ_CENTER_NODE_TYPE) {
    return;
  }

//  $webform_node = new stdClass();
//  $webform_node->uid = $node->uid;
//  $webform_node->type = 'webform';
//  $webform_node->title = $node->title . '(预约)';
//  node_object_prepare($webform_node);
//  $webform_node->language = $node->language;
//  $webform_node->body = $node->title;
//  $webform_node->og_group_ref['und'][0]['target_id'] = $node->nid;
//  node_save($webform_node);
}

/**
 * fetch center reservation node by center node id
 * @param type $centerid one center node id or center node
 * @return null
 */
function sbq_center_reservation_node_by_center($centerid = NULL) {
  if (!$centerid) {
    $center_arg1 = arg(1);
    $centerid = $center_arg1 ? $center_arg1 : 0;
  }
  if (is_object($centerid)) {
    $node = $centerid;
  } else {
    $node = node_load($centerid);
  }

  if (isset($node->type) && $node->type != SBQ_CENTER_NODE_TYPE) {
    return NULL;
  }
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
      ->fieldCondition('og_group_ref', 'target_id', $node->nid)
      ->propertyCondition('type', 'webform')
      ->execute();
  if (!isset($result['node'])) {
    return NULL;
  }
  $reservationid = reset(array_keys($result['node']));
  return node_load($reservationid);
}

/**
 *  fetch user reservation
 * @param type $filter array('uid'=>?, 'nid' => ?), $uid is not must
 * @param type $page
 * @param type $pagesize
 */
function sbq_center_reservation_get_submissions($filter, $page = 0, $pagesize = 10, $from = 'app') {
  $query = db_select('webform_submissions', 'wfs')
      ->fields('wfs', array( 'sid' ))
      ->orderBy('submitted', 'DESC')
      ->condition('nid', $filter['nid'])
      ->condition('is_draft', 0);

  if (isset($filter['uid']) && $filter['uid']) {
    $query->condition('uid', $filter['uid']);
    $count = webform_get_submission_count($filter['nid'], $filter['uid']);
  } else {
    $count = webform_get_submission_count($filter['nid']);
  }

//  $pages = pager_default_initialize($count, $pagesize);
//  $result = db_query_range($query->, $pages * $pagesize, $pagesize)->fetchAllAssoc('uid');
  if ($from == 'app') {
    $result = $query->range($page * $pagesize, $pagesize)
        ->execute()
        ->fetchAllAssoc('sid');
  } else {
    $result = $query->extend('PagerDefault')
        ->limit(10)
        ->execute()
        ->fetchAllAssoc('sid');
  }

  $reservation = array();
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  foreach ($result as $key => $value) {
    $reservation[] = webform_get_submission($filter['nid'], $key);
  }
  if ($from != 'app') {
    return $reservation;
  }
  return array(
      'reservation' => $reservation,
      'page' => $page,
      'pagecount' => ceil($count / $pagesize)
  );
}

/**
 * hook_theme
 * @return array
 */
function sbq_center_reservation_theme() {
  $tpls = array(
      'sbq_center_reservation' => array(
          'template' => 'sbq_center_reservation',
          'variables' => array()
      ),
  );
  return $tpls;
}

//function sbq_center_reservation_webform_submission_render_alter(&$renderable) {
//  $old = $renderable;
//  foreach ($renderable as $key => $value) {
//    if (strpos($key, 'sbq') !== FALSE) {
////      $new = array(
////          '#title' => $value['#title'],
////          '#value' => $value['#value'],
////      );
////      if(isset($value['#options'])){
////        $new += array(
////            '#options' => $value['#options']
////        );
////      }
////      unset($renderable[$key]);
////      $renderable[$key] = $new;
//    }
//  }
//}

/**
 * 
 * @param type $node
 * @param type $submission array($submission);
 * @param type $email
 * @param type $format
 * @return array
 * @see webform_submission_render
 */
function sbq_center_reservation_render($node, $submission, $email, $format, $multi = FALSE) {
  $component_tree = array();
  $components = $node->webform['components'];
  $page_count = 1;
  _webform_components_tree_build($components, $component_tree, 0, $page_count);
  if (!$multi) {
    $submission = array( $submission );
  }
  $result = array();
  foreach ($submission as $k => $v) {
    if (isset($component_tree['children'])) {
      foreach ($component_tree['children'] as $cid => $component) {
        if (_webform_client_form_rule_check($node, $component, $component['page_num'], NULL, $submission)) {
          _webform_client_form_add_component($node, $component, NULL, $renderable, $renderable, NULL, $v, $format);
        }
      }
    }
    $fields = isset($renderable) ? $renderable : array();
    $data = array();
    foreach ($fields as $key => $value) {
      $data[$key] = array(
          '#title' => $value['#title']
      );
      switch ($key) {
        case 'sbq_center_outpatient':
          $data[$key]['#value'] = $value['#options'][$value['#value'][0]];
          break;
        case 'sbq_center_name':
          $data[$key]['#value'] = $value['#value'];
          break;
        case 'sbq_center_sex':
          $data[$key]['#value'] = $value['#options'][$value['#value'][0]];
          break;
        case 'sbq_center_bron':
        case 'sbq_center_time':
          $data[$key]['#value'] = $value['#value']['year'] . '-' . $value['#value']['month'] . '-' . $value['#value']['day'];
          break;
        case 'sbq_center_body':
          $data[$key]['#value'] = $value['#value'];
          break;
        case 'sbq_center_file':
          $data[$key]['#value'] = file_create_url($value['#value']->uri);
          break;
        case 'sbq_center_recommended':
          $data[$key]['#value'] = $value['#value'];
          break;
        case 'sbq_center_category':
          $data[$key]['#value'] = $value['#options'][$value['#value'][0]];
          break;
        case 'center_status':
          dpm($value);
          $data[$key]['#value'] = $value['#options'][$value['#value'][0]];
          break;
        default:
          break;
      }
    }
    $result[$v->sid] = $data;
  }
  if (!$multi) {
    return reset($result);
  }
  return $result;
}

function sbq_center_reservation_update($node, $sid, $submission) {
  dpm($submission);
  module_load_include('module', 'webform');
//  $form_state = array();
//  $form_state['values']['submitted'] = $submission;
//
//  $form_state['values']['details']['sid'] = $sid;
//  $form_state['values']['op'] = variable_get('services_webform_submit_button_resource_create', t('Submit'));
//  drupal_form_submit('webform_client_form_' . $node->nid, $form_state, $node, array());
//  if ($errors = form_get_errors()) {
//    _drupal_exception_handler(new Exception(implode(" ", $errors)));
//  }
  return '预约表单#' . $sid . '更新成功';
}

function sbq_center_reservation_field_keys($key = NULL) {
  $fields = array(
      'sbq_center_outpatient' => 1,
      'sbq_center_name' => 2,
      'sbq_center_sex' => 3,
      'sbq_center_bron' => 4,
      'sbq_center_time' => 5,
      'sbq_center_body' => 6,
      'sbq_center_file' => 7,
      'sbq_center_recommended' => 8,
      'sbq_center_category' => 10,
      'sbq_center_status' => 11,
  );

  if ($key) {
    return $fields[$key];
  }
  return $fields;
}

function sbq_center_reservation_text() {
  return 'sbq';
}

/**
 * hook_webform_submission_update accept submission for generate message
 * @param type $node
 * @param type $submission
 */
function sbq_center_reservation_webform_submission_update($node, $submission) {
  if (!isset($node->og_group_ref) || !isset($node->og_group_ref['und'][0]['target_id'])) {
    return;
  }
  if ($submission->data[sbq_center_reservation_field_keys('sbq_center_status')]['value'][0] == 1) {
    global $user;
    $time = $submission->data[sbq_center_reservation_field_keys('sbq_center_time')]['value'][0];
    $message = message_create('sbq_center_reservation_accept', array(
        'arguments' => array( '!time' => $time, )
        ), $user);

    $warpper = entity_metadata_wrapper('message', $message);
    $warpper->field_node_ref->set($node);
    $warpper->save();
  }
}

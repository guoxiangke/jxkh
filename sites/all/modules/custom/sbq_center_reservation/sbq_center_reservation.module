<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * 预约门诊类型
 */
define('SBQ_CENTER_RESERVATION_TYPE_OUTPATIMENT', 0);
/**
 * 预约电话类型
 */
define('SBQ_CENTER_RESERVATION_TYPE_PHONE', 1);

/**
 * hook menu
 */
function sbq_center_reservation_menu() {
  $items['node/%/reservation/%'] = array(
      'page callback' => 'sbq_center_reservation',
      'page arguments' => array( 1, 3 ),
      'access callback' => 'sbq_center_reservation_access',
      'access arguments' => array( 'form', NULL ),
      'file' => 'sbq_center_reservation.inc',
      'type' => MENU_CALLBACK,
  );

  return $items;
}

function sbq_center_reservation_access($type, $account = NULL) {
  return TRUE;
}

/**
 * fetch center reservation form by center node id or arg(1)
 * @param type $sbq_center_reservation_type in SBQ_CENTER_RESERVATION_TYPE_OUTPATIMENT, SBQ_CENTER_RESERVATION_TYPE_PHONE
 * @param type $centerid center node id or arg(1) or center node
 * @return type form
 */
function sbq_center_reservation_sheet($sbq_center_reservation_type, $centerid = NULL) {
  if ($sbq_center = sbq_center_reservation_node_by_center($centerid)) {
    $node = node_load($sbq_center->nid);
    webform_node_view($node, 'full');
    $webform = $node->content['webform'];
    $webform['submitted']['sbq_center_category']['#value'] = $sbq_center_reservation_type;
  }
  return isset($webform) ? $webform : '';
}

/**
 *  hook_webform_submission_insert
 * @param type $node
 * @param type $submission
 */
function sbq_center_reservation_webform_submission_insert($node, $submission) {
//  global $user;
//  $title = $user->name;
//  if ($user->uid != $submission->uid) {
//    $account = user_load($submission->uid);
//    $title = $account->name;
//  }
//  db_insert('webform_submissions_center_reservation')
//      ->fields(array(
//          'sid' => $submission->sid,
//          'nid' => $node->nid,
//          'cid' => $submission->data[9]['value'][0],
//          'uid' => $submission->uid,
//          'type' => $submission->data[10]['value'][0],
//          'is_draft' => $submission->is_draft,
//          'submitted' => $submission->submitted,
//          'remote_addr' => $submission->remote_addr,
//          'short_title' => $title,
//      ))->execute();
}

/**
 * Implements hook_og_permission().
 */
function sbq_center_reservation_og_permission() {
  $items = array();

  $items['access all center reservation results'] = array(
      'title' => t('Access all center reservation results in group'),
      'description' => t('Grants access to the "Results" tab on all reservation in this group. Generally a group admin permission.'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['edit all center reservation submissions'] = array(
      'title' => t('Edit all center reservation submissions in group'),
      'description' => t('Allows editing of any center reservation submission by any user in this group. Generally a group admin permission.'),
      'roles' => array( OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['delete all center reservation submissions'] = array(
      'title' => t('Delete all center reservation submissions in group'),
      'description' => t('Allows deleting of any center reservation submission by any user in this group. Generally a group admin permission.'),
      'roles' => array( OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['access own center reservation submissions'] = array(
      'title' => t('Access own center reservation submissions'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['edit own center reservation submissions'] = array(
      'title' => t('Edit own center reservation submissions'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  $items['delete own center reservation submissions'] = array(
      'title' => t('Delete own center reservation submissions'),
      'roles' => array( OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE ),
  );

  return $items;
}

/**
 * Implements hook_webform_submission_access().
 *
 * @see webform_submission_access()
 */
function sbq_center_reservation_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;
  // If this webform is not in a group, don't affect access.
  if (empty($node->og_group_ref['und'])) {
    return;
  }

  $access_all = FALSE;
  $access_own_submission = FALSE;
  foreach ($node->og_group_ref['und'] as $group) {
    // Determine if the user has access to all results and submissions.
    if (og_user_access('node', $group['target_id'], 'access all center reservation results', $account)) {
      $access_all = TRUE;
      break; // If we access to everything, "access own" doesn't matter.
    }

    // Or check if they have access to just their own submissions.
    if (isset($submission) && og_user_access('node', $group['target_id'], 'access own center reservation submissions', $account) && (($account->uid && $account->uid == $submission->uid) || isset($_SESSION['webform_submission'][$submission->sid]))) {
      $access_own_submission = TRUE;
    }
  }

  // Access to any operation (view/edit/delete) requires access permission.
  $general_access = $access_all || $access_own_submission;

  switch ($op) {
    case 'view':
      return $general_access;
    case 'save':
      // The "save" case tells Webform to save a session for anonymous users if
      // they have permission to access their own permissions.
      return og_user_access('node', $group['target_id'], 'access own center reservation submissions', $account);
    case 'list':
      
      $f= og_user_access('node', $group['target_id'], 'access all center reservation results', $account) || (og_user_access('node', $group['target_id'], 'access own center reservation submissions', $account) && ($account->uid || isset($_SESSION['webform_submission'])));
      return true;
    case 'edit':
      if ($general_access) {
        foreach ($node->og_group_ref['und'] as $group) {
          if (og_user_access('node', $group['target_id'], 'edit all center reservation submissions', $account) || (og_user_access('node', $group['target_id'], 'edit own center reservation submissions', $account) && $submission->uid == $account->uid)) {
            return TRUE;
          }
        }
      }
      break;
    case 'delete':
      if ($general_access) {
        foreach ($node->og_group_ref['und'] as $group) {
          if (og_user_access('node', $group['target_id'], 'delete all center reservation submissions', $account) || (og_user_access('node', $group['target_id'], 'delete own center reservation submissions', $account) && $submission->uid == $account->uid)) {
            return TRUE;
          }
        }
      }
      break;
  }

}

/**
 * Implements hook_webform_results_access().
 */
function sbq_center_reservation_webform_results_access($node, $account = NULL) {
  // If this webform is not in a group, don't affect access.
  if (empty($node->og_group_ref['und'])) {
    return;
  }
  foreach ($node->og_group_ref['und'] as $group) {
    if (og_user_access('node', $group['target_id'], 'access all center reservation results', $account)) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_webform_results_clear_access().
 */
function sbq_center_reservation_webform_results_clear_access($node, $account = NULL) {
  if (empty($node->og_group_ref['und'])) {
    return;
  }

  foreach ($node->og_group_ref['und'] as $group) {
    if (og_user_access('node', $group['target_id'], 'delete all center reservation submissions', $account)) {
      return sbq_center_reservation_webform_results_access($node, $account);
    }
  }
}

/**
 * hook_node_insert
 * after create center create center reservation
 * @param type $node
 * @return type
 */
function sbq_center_reservation_node_insert($node) {
  if (!isset($node->type) || $node->type != SBQ_CENTER_NODE_TYPE) {
    return;
  }
  $webform_node = new stdClass();
  $webform_node->uid = $node->uid;
  $webform_node->type = 'webform';
  $webform_node->title = $node->title . '(预约)';
  node_object_prepare($webform_node);
  $webform_node->language = language_default();
  $webform_node->body = $node->title;
  $webform_node->og_group_ref['und'][0]['target_id'] = $node->nid;
  node_save($webform_node);
}

/**
 * fetch center reservation node by center node id
 * @param type $centerid one center node id or center node
 * @return null
 */
function sbq_center_reservation_node_by_center($centerid = NULL) {
  if (!$centerid) {
    $center_arg1 = arg(1);
    $centerid = $center_arg1 ? $centerid : 0;
  }
  if (is_object($centerid)) {
    $node = $centerid;
  } else {
    $node = node_load($centerid);
  }
  if ($node->type != SBQ_CENTER_NODE_TYPE) {
    return NULL;
  }
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
      ->fieldCondition('og_group_ref', 'target_id', $node->nid)
      ->propertyCondition('type', 'webform')
      ->execute();
  if (!isset($result['node'])) {
    return NULL;
  }
  $reservationid = reset(array_keys($result['node']));
  return node_load($reservationid);
}

<?php

/**
 * Implements hook_services_resources.
 */
function sbq_services_services_resources() {
  module_load_include('inc', 'sbq_services', 'resources/grow_records_resource');
  module_load_include('inc', 'sbq_services', 'resources/center_resource');
  //module_load_include('inc', 'sbq_services', 'resources/center_reservation_resource');
  $resources = array(
      '#api_version' => 3002,
  );
  $resources += grow_records_resource_definition();
  $resources += center_resource_definition();
  //$resources += center_reservation_resource_definition();
  return $resources;
}

function sbq_services_services_resources_alter(&$resources, $endpoint) {
  $resources['user']['actions']['login']['callback'] = '_sbq_services_user_login';
  $resources['file']['operations']['create']['callback'] = '_sbq_services_file_create';
}

/*
 * @see _user_resource_login
 */

function _sbq_services_user_login($username, $password) {
  global $user;

  $account = _user_resource_login($username, $password);
  if (!$user->uid) {
    return $account;
  }

  $return = new stdClass();
  $return->uid = $account->user->uid;
  $return->sessid = session_id();
  $return->session_name = session_name();
  $users = _sbq_services_user_format(user_load($account->user->uid));
  $return->user = reset($users);
  return $return;
}

function _sbq_services_user_format($accounts) {
  if (!is_array($accounts)) {
    $accounts = array( $accounts );
  }
  $format = array();
  foreach ($accounts as $account) {
    $obj = new stdClass();
    $obj->name = $account->name;
    $obj->mail = $account->mail;
    if (isset($account->picture->uri)) {
      $obj->picture = $account->picture->uri;
    } else {
      $default_image_uri = variable_get('user_picture_default');
      $obj->picture = file_create_url($default_image_uri);
    }
    $format[] = $obj;
  }
  return $format;
}

function _sbq_services_file_create($file) {
  // Adds backwards compatability with regression fixed in #1083242
  // $file['file'] can be base64 encoded file so we check whether it is
  // file array or file data.
  $file = _services_arg_value($file, 'file');

  // If the file data or filename is empty then bail.
  if (!isset($file['file']) || empty($file['filename'])) {
    return services_error(t("Missing data the file upload can not be completed"), 500);
  }

  // Get the directory name for the location of the file:
  if (empty($file['filepath'])) {
    $file['filepath'] = file_default_scheme() . '://' . $file['filename'];
  }
  $dir = drupal_dirname($file['filepath']);
  // Build the destination folder tree if it doesn't already exists.
  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    return services_error(t("Could not create destination directory for file."), 500);
  }

  // Rename potentially executable files, to help prevent exploits.
  if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file['filename']) && (drupal_substr($file['filename'], -4) != '.txt')) {
    $file['filepath'] .= '.txt';
    $file['filename'] .= '.txt';
  }

  // Write the file
  if (!$file_saved = file_save_data(base64_decode($file['file']), $file['filepath'])) {
    return services_error(t("Could not write file to destination"), 500);
  }

  if (isset($file['status']) && $file['status'] == 0) {
    // Save as temporary file.
    $file_saved->status = 0;
    file_save($file_saved);
  } else {
    // Required to be able to reference this file.
    file_usage_add($file_saved, 'services', 'files', $file_saved->fid);
  }

  return array(
      'fid' => $file_saved->fid,
      'uri' => file_create_url($file_saved->uri),
  );
}

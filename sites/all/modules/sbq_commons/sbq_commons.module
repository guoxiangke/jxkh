<?php

/**
 * 1.must have rate name vote_sbq_topic.
 */
// 医生群体关注
define('FOLLOWER_DOCTOR', 1);
// 病人群体关注
define('FOLLOWER_PATIENT', 2);
// 医患群体关注
define('FRIEND_DOCTOR_PATIENT', 3);

//rid
define('USER_DOCTOR_RID', 4);
define('USER_PATIENT_RID', 5);
define('USER_CERTIFIED_DOCTOR_RID', 7);

/**
 * Implements hook_form_alter().
 */
function sbq_commons_form_alter(&$form, &$form_state, $form_id) {

  // watchdog('sbq_commons', $form_id, array(), WATCHDOG_NOTICE, 'link');
  if ($form_id == 'privatemsg_new') {
    $form['recipient']['#access'] = FALSE;
    $form['subject']['#access'] = FALSE;
  }
  if (isset($form['comment_body'])) {
    $form['comment_body'][LANGUAGE_NONE][0]['#title'] = t('Comment');
  }
  if (isset($form['body'])) {
    $form['body'][LANGUAGE_NONE][0]['#title'] = t('Body');
  }
  if (isset($form['field_tags'])) {
    $form['field_tags'][LANGUAGE_NONE]['#title'] = t('Tags');
  }
  if (isset($form['field_image'])) {
    $form['field_image'][LANGUAGE_NONE]['#title'] = t('image');
  }
  switch ($form_id) {
    case 'comment_node_sbq_topic_form':
      $form['subject']['#access'] = FALSE;
      $form['author']['#access'] = FALSE;
      $form['actions']['submit']['#value'] = '发表观点';
      $form['actions']['preview']['#access'] = FALSE;
      // $form['comment_body'][LANGUAGE_NONE][0]['#title'] = '';
      $form['comment_body'][LANGUAGE_NONE][0]['#default_value'] = '我支持的观点：禁止发布含有辱骂、国情等敏感词汇';
      // vote logic  for topic!
      $node = $form['#node'];
      $rate_widget_id = sbq_commons_get_rid_by_name('vote_sbq_topic');
      if ($rate_widget_id)
        $rate_result = rate_get_results('node', $node->nid, $rate_widget_id);

      if (isset($rate_result['user_vote'])) {
        $form['sbq_topic_voted'] = array('#type' => 'hidden', '#value' => 0);
        switch ($rate_result['user_vote']) {
          case '支持':
            $form['field_field_sbq_topic_type'][LANGUAGE_NONE]['#default_value'] = 1;
            $form['sbq_topic_voted'] = array('#type' => 'hidden', '#value' => 1);
            break;
          case '反对':
            $form['field_field_sbq_topic_type'][LANGUAGE_NONE]['#default_value'] = 0;
            $form['sbq_topic_voted'] = array('#type' => 'hidden', '#value' => -1);
            break;
          default:
            # code...
            break;
        }
      }

      break;
    case 'user_register_form':

      $form['profile_doctor_profile']['#access'] = FALSE;
      $form['profile_customer_profile']['#access'] = FALSE;
      break;
    case 'user_login_block':
      # code...
      $form['actions']['#prefix'] = '<div class="input-prepend input-append">';
      $form['actions']['#suffix'] = '</div>';
      $form['links']['#markup'] = '<ul>
                        <li class="last">
                        <a href="/user/password" title="' . t('Request new password via e-mail.') . '">
                        ' . t('Request new password') . '
                        </a></li></ul>';
      $form['links']['#weight'] = '100';
      break;
    case 'general_group_node_form':
    case 'doctor_group_node_form':
      $form['actions']['submit']['#value'] = t('申请');
      break;
    default:
      break;
  }
  if (isset($_GET['og_group_ref']) && $form_id == 'post_node_form') {
    $form['actions']['submit']['#submit'][] = 'sbq_commons_node_form_redirect_handle';
    $form['#redirect'] = 'node/' . $_GET['og_group_ref'];
  }
}

function sbq_commons_get_rid_by_name($name) {
  $rate_widget_id = FALSE;
  $rate_widgets = variable_get('rate_widgets', NUll);
  if (is_array($rate_widgets)) {
    foreach ($rate_widgets as $rid => $rate) {
      if ($rate->name == $name) {
        $rate_widget_id = $rid;
        break;
      }
    }
  }
  return $rate_widget_id;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sbq_commons_form_comment_form_alter(&$form, &$form_state, $form_id) {

  // Check to see if this node type uses ajax comments.
  if (!ajax_comments_node_type_active($form['#node']->type)) {
    return;
  }
  if ($form['#node']->type != 'sbq_topic') {
    return;
  }
  // child comment ajax behavior
  if (isset($form['pid']['#value'])) {
    $form['actions']['submit']['#ajax'] = array(
        'callback' => 'ajax_comments_submit_js4child',
        'wrapper' => $form['#id'],
        'method' => 'replace',
        'effect' => 'fade',
        'file' => 'sbq_commons.inc',
    );
  } else {// main comment ajax behavior
    $form['actions']['submit']['#ajax'] = array(
        'callback' => 'ajax_comments_submit_js4sbq',
        'wrapper' => $form['#id'],
        'method' => 'replace',
        'effect' => 'fade',
        'file' => 'sbq_commons.inc',
    );
  }
  // HACK, stop ctools from modifying us in node_comment_form.inc
  $form_state['ctools comment alter'] = FALSE;
}

/**
 * Implements hook_init().
 */
function sbq_commons_init() {
  // Load sbq_commons.inc from the node module.
  drupal_add_js(drupal_get_path('module', 'sbq_commons') . '/js/sbq-commons.js');
  module_load_include('inc', 'sbq_commons', 'sbq_commons');
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node && $node->type == 'sbq_topic') {
      drupal_add_css(drupal_get_path('module', 'sbq_commons') . '/css/topic-page.css');
      drupal_add_js(drupal_get_path('module', 'sbq_commons') . '/js/topic-page.js');
    }
  }
}

/**
 * Implements hook_admin_paths_alter().
 */
function sbq_commons_admin_paths_alter(&$paths) {
  // Treat all user pages as administrative.
  /*
   * $paths['user'] = TRUE;
   * $paths['user/*'] = TRUE;
   */
  // Treat the forum topic node form as a non-administrative page.
  /*
   * $paths['node/add/forum'] = FALSE;
   */
  $paths['node/add'] = FALSE;
  $paths['node/add/*'] = FALSE;
}

/**
 * Implements hook_preprocess_page().
  TODO:1.hide different roles access to tab of relationships user/%/relationships/1|2|3
  2.rewrite access to create relationships menu. user hook_menu_alter()
 */
function sbq_commons_preprocess_page(&$variables) {
  global $user;
  if (arg(0) == 'user' && (arg(2) == 'relationships')) {
    if (in_array('doctor', $user->roles)) {
      if (isset($variables['tabs']['#secondary'][4])) {
        unset($variables['tabs']['#secondary'][4]);
      }
    } elseif (in_array('patient', $user->roles)) {
      if (isset($variables['tabs']['#secondary'][3])) {
        unset($variables['tabs']['#secondary'][3]);
      }
    }
  }
  switch ($_GET['q']) {
    case 'node/add/doctor-group':
      drupal_set_title(t('申请医生小组'));
      break;
    case 'node/add/general-group':
      drupal_set_title(t('申请患者小组'));
      break;
    default:
      break;
  }
  return $variables;
}

/**
 * Implements hook_user_view().
 * @see // function user_relationships_ui_user_view($account, $view_mode) {
  TODO: hide dc-ur for c2c or d2d | hide not use of UR in when see others page.different roles
 */
function sbq_commons_user_view($account, $view_mode, $langcode) {
  global $user;
  if (($account->uid == $user->uid) && user_relationships_user_access('maintain @relationship relationships')) {
    _user_relationships_ui_set_notifications($account);
    return;
  }

  $output = array();
  if ($list = user_relationships_ui_actions_between($user, $account, array('remove' => 1))) {
    $output['relations'] = array(
        '#title' => t('Your relationships to this user'),
        '#type' => 'user_profile_item',
        '#markup' => theme('item_list', array('items' => $list)),
        '#attributes' => array('class' => array('user_relationships_ui')),
    );
  }

  if ($actions = sbq_commons_relationships_ui_actions_between($user, $account)) {
    $output['actions'] = array(
        '#title' => t('Relationship actions'),
        '#type' => 'user_profile_item',
        '#markup' => theme('item_list', array('items' => $actions)),
        '#attributes' => array('class' => array('user_relationships_ui_actions')),
    );
  }
  if (sizeof($output)) {
    $account->content['user_relationships_ui'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('Relationships'),
        '#weight' => 10,
    );
    $account->content['user_relationships_ui'] = array_merge($account->content['user_relationships_ui'], $output);
  }
}

/**
 * Implements hook_menu_alter().
 */
function sbq_commons_menu_alter(&$items) {
  foreach (user_relationships_types_load() as $rtid => $relationship) {
    $items["relationship/%user/request/{$rtid}"] = array(
        'title' => $relationship->rtid,
        'title callback' => 'user_relationships_ui_title_callback',
        'type' => MENU_CALLBACK,
        'access callback' => 'sbq_commons_relationships_ui_check_access',
        'access arguments' => array('request', 1, 3),
        'page callback' => 'user_relationships_ui_request_ajax',
        'page arguments' => array(1),
        'file' => drupal_get_path('module', 'user_relationships_ui') . '/user_relationships_ui.forms.inc',
    );
  }
  //@url http://192.168.0.150:800/redmine/issues/49
  //@og_ui_menu //user_is_logged_in ==>group_subscribe4sbq
  $items['group/%/%/subscribe']['access callback'] = 'group_subscribe4sbq';
  $items['group/%/%/subscribe']['access arguments'] = array(1, 2);
  // $items['group/%/%/unsubscribe']['access callback'] = 'group_unsubscribe4sbq';

  if (isset($items['taxonomy/autocomplete'])) {
    $items['taxonomy/autocomplete']['page callback'] = 'sbq_commons_taxonomy_autocomplete';
  }
}

/**
 * relationships_ui_check_access 
 */
function sbq_commons_relationships_ui_check_access($type, $account = NULL, $relationship_type = NULL) {
  global $user;
  if (!is_object($account)) {
    $account = $user;
  }
  if (!is_object($relationship_type)) {
    $relationship_type = user_relationships_type_load($relationship_type);
  }

  if (user_access('administer user relationships')) {
    return TRUE;
  }

  // If the user does not any have permission, deny access.
  if (!user_relationships_can_receive($account)) {
    return FALSE;
  }

  switch ($type) {
    case 'view':
      // First check if it is the current user and if he has view own
      // permission.
      if ($account->uid == $user->uid && user_relationships_user_access('view own @relationship relationships', $relationship_type)) {
        return TRUE;
      }

      // If this is a different user or he doesn't have that permission,
      // check the view all permission.
      if (user_relationships_user_access('view all @relationship relationships', $relationship_type)) {
        return TRUE;
      }
      break;
    case 'approve':
      // Only the administer permission allows to approve, request, delete
      // relationships for other users, which was already checked.
      if ($account->uid == $user->uid && user_relationships_user_access('maintain @relationship relationships', $relationship_type)) {
        return TRUE;
      }
      break;
    case 'request':
      return sbq_commons_relationships_ui_check_access_by_roles($user, $account, $relationship_type->rtid);
      break;
    case 'delete':
      // Do not allow access if this is a oneway relationship requested by another user.
      // if (is_object($relationship_type) && $relationship_type->is_oneway && $relationship_type->requester_id != $user->uid) {
      //   return FALSE;
      // }
      if ($account->uid == $user->uid && user_relationships_user_access('delete @relationship relationships', $relationship_type)) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

/**
 * use user-roles check_access 
 */
function sbq_commons_relationships_ui_check_access_by_roles($user, $account, $relationship) {
  if (in_array('doctor', $user->roles)) {
    if (in_array('doctor', $account->roles) && $relationship == FOLLOWER_DOCTOR) {
      return TRUE;
    } elseif (in_array('patient', $account->roles) && $relationship == FRIEND_DOCTOR_PATIENT) {
      # code...
      return TRUE;
    }
  } elseif (in_array('patient', $user->roles)) {
    # code...
    if (in_array('patient', $account->roles) && $relationship == FOLLOWER_PATIENT) {
      return TRUE;
    } elseif (in_array('doctor', $account->roles) && $relationship == FRIEND_DOCTOR_PATIENT) {
      # code...
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * @see user_relationships_ui_actions_bwtween
 */
function sbq_commons_relationships_ui_actions_between($viewer, $viewed) {
  $action = 0;
  foreach (array(FOLLOWER_DOCTOR, FOLLOWER_DOCTOR, FRIEND_DOCTOR_PATIENT) as $v) {
    if (sbq_commons_relationships_ui_check_access_by_roles($viewer, $viewed, $v)) {
      $action = $v;
    }
  }
  if ($viewer->uid == $viewed->uid) {
    return;
  }
  $list = array();
  $type = user_relationships_types_load();
  if ($action == FRIEND_DOCTOR_PATIENT) {
    $relationships = $type[$action];
    $list[] = t('You have sent a new @rel_name request to this user. (!pending_requests)', array(
        '!pending_requests' => l(t('pending requests'), "relationships/sent"),
            ) + user_relationships_type_translations($relationships));
  }
  if ($action == FOLLOWER_DOCTOR || $action == FOLLOWER_PATIENT) {
    $relationship = $type[$action];
    if ($relationship) {
      // If configured, create direct links.
      if (variable_get('user_relationships_show_direct_links', 1)) {
        // Create a single link, or one for each relationship type.
        $list[] = theme('user_relationships_request_relationship_direct_link', array('relate_to' => $viewed, 'relationship_type' => $relationship));
      }
      // just one generic link pointing to a page with dropdown.
      else {
        $list[] = theme('user_relationships_request_relationship_link', array('relate_to' => $viewed));
      }
    }
  }
  return $list;
}

function sbq_commons_node_submit(&$node, $form, $form_state) {
  foreach ($form_state['field'] as $field_key => $field) {
    if (isset($field[LANGUAGE_NONE]) && $field[LANGUAGE_NONE]['field']['type'] == 'taxonomy_term_reference' && $field[LANGUAGE_NONE]['instance']['widget']['type'] == 'taxonomy_autocomplete') {
      $full_tags = $form_state['input'][$field_key][LANGUAGE_NONE];
      foreach (array('，', '。', ' ', '.', '、', '、', '\\', '／', '/') as $it) {
        $full_tags = str_replace($it, ',', $full_tags);
      }
      $full_items = explode(',', $full_tags);
      $orgin_item = array(
          'tid' => $node->{$field_key}[LANGUAGE_NONE][0]['tid'],
          'vid' => $node->{$field_key}[LANGUAGE_NONE][0]['vid'],
          'vocabulary_machine_name' => $node->{$field_key}[LANGUAGE_NONE][0]['vocabulary_machine_name'],
      );
      if (isset($full_items) && !empty($full_items)) {
        unset($node->{$field_key}[LANGUAGE_NONE]);
        foreach ($full_items as $items) {
          $orgin_item['name'] = $items;
          $node->{$field_key}[LANGUAGE_NONE][] = $orgin_item;
        }
      }
    }
  }
}

/**
 * @see hook_menu_alter for group subscribe
  //15:54 2013/10/8
  //http://192.168.0.150:800/redmine/issues/49
 */
function group_subscribe4sbq($group_type, $gid) {
  if ($group_type == 'node') {
    $node = node_load($gid);
    if ($node) {
      // define('USER_DOCTOR_RID', 4);
      // define('USER_PATIENT_RID', 5);
      // define('USER_CERTIFIED_DOCTOR_RID', 7);
      // 医生can加入医生/患者小组      
      // 患者只能加入患者小组
      global $user;
      // dpm($user,USER_CERTIFIED_DOCTOR_RID);
      $group_types = array('doctor_group', 'general_group');
      if (in_array($node->type, $group_types)) {
        if (in_array(USER_CERTIFIED_DOCTOR_RID, array_keys($user->roles))) {
          return TRUE;
        }
        if (in_array(USER_PATIENT_RID, array_keys($user->roles)) && $node->type == 'general_group') {
          return TRUE;
        }
        drupal_set_message("You are not allow subscribe this $node->type!", 'warning', FALSE);
        return FALSE;
      }
    }
  }
  return user_is_logged_in();
}

/**
 * Implements hook_preprocess_HOOK().
  //http://192.168.0.150:800/redmine/issues/49
 */
function sbq_commons_preprocess_field(&$variables) {
  $field_name = $variables['element']['#field_name'];
  if ($field_name == 'group_group') {
    // Your code here.
    $node = $variables['element']['#object'];
    //@see group_subscribe4sbq()
    global $user;
    $group_types = array('doctor_group', 'general_group');
    if (in_array($node->type, $group_types)) {
      if (in_array(USER_CERTIFIED_DOCTOR_RID, array_keys($user->roles))) {
        return TRUE;
      }
      if (in_array(USER_PATIENT_RID, array_keys($user->roles)) && $node->type == 'general_group') {
        return TRUE;
      }
      drupal_set_message("You are not allow subscribe this $node->type!", 'warning', FALSE);
      $variables['items'] = array();
    }
  }
  //end @see
}

/**
 * 
 * @param type $field_name
 * @param type $tags_typed 
 * @see taxonomy_menu()
 */
function sbq_commons_taxonomy_autocomplete($field_name = '', $tags_typed = '') {
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments, recover the intended $tags_typed.
  $args = func_get_args();
  // Shift off the $field_name argument.
  array_shift($args);
  $tags_typed = implode('/', $args);

  // Make sure the field exists and is a taxonomy field.
  if (!($field = field_info_field($field_name)) || $field['type'] !== 'taxonomy_term_reference') {
    // Error string. The JavaScript handler will realize this is not JSON and
    // will display it as debugging information.
    print t('Taxonomy field @field_name not found.', array('@field_name' => $field_name));
    exit;
  }

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  foreach (array('，', '。', ' ', '.', '、', '、', '\\', '／', '/') as $it) {
    $tags_typed = str_replace($it, ',', $tags_typed);
  }
  $tags_typed = drupal_explode_tags($tags_typed);

  $tag_last = drupal_strtolower(array_pop($tags_typed));

  $term_matches = array();
  if ($tag_last != '') {
    // Part of the criteria for the query come from the field's own settings.
    $vids = array();
    $vocabularies = taxonomy_vocabulary_get_names();
    foreach ($field['settings']['allowed_values'] as $tree) {
      $vids[] = $vocabularies[$tree['vocabulary']]->vid;
    }

    $query = db_select('taxonomy_term_data', 't');
    $query->addTag('translatable');
    $query->addTag('term_access');

    // Do not select already entered terms.
    if (!empty($tags_typed)) {
      $query->condition('t.name', $tags_typed, 'NOT IN');
    }
    // Select rows that match by term name.
    $tags_return = $query
            ->fields('t', array('tid', 'name'))
            ->condition('t.vid', $vids)
            ->condition('t.name', '%' . db_like($tag_last) . '%', 'LIKE')
            ->range(0, 10)
            ->execute()
            ->fetchAllKeyed();

    $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) . ', ' : '';

    foreach ($tags_return as $tid => $name) {
      $n = $name;
      // Term names containing commas or quotes must be wrapped in quotes.
      if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
        $n = '"' . str_replace('"', '""', $name) . '"';
      }
      $term_matches[$prefix . $n] = check_plain($name);
    }
  }

  drupal_json_output($term_matches);
}

/**
 * node form redirect
 * @param type $form
 * @param array $form_state 
 */
function sbq_commons_node_form_redirect_handle(&$form, &$form_state) {
  $form_state['redirect'] = $form['#redirect'];
}

/**
 * count user members group
 * @param type $gid
 * @return type 
 * @see og_ui_handler_area_og_membership_overview::render
 */
function sbq_commons_count_group_members($gid, $group_type = 'node') {
  $base_query = new EntityFieldQuery();
  $base_query
          ->entityCondition('entity_type', 'og_membership')
          ->propertyCondition('group_type', $group_type, '=')
          ->propertyCondition('gid', $gid, '=')
          ->count()
          ->propertyCondition('entity_type', 'user', '=')
          ->execute();
  return $base_query;
}

/**
 * count group_content 
 * @param type $gid
 * @param type $group_type
 * @return type 
 * @see og_ui_handler_area_og_membership_overview::render
 */
function sbq_commons_count_group_content($gid, $group_type = 'node') {
  $base_query = new EntityFieldQuery();
  $base_query
          ->entityCondition('entity_type', 'og_membership')
          ->propertyCondition('group_type', $group_type, '=')
          ->propertyCondition('gid', $gid, '=')
          ->count()
          ->propertyCondition('entity_type', 'node', '=')
          ->execute();
  return $base_query;
}
/**
 * for group content contextual_links
 * @param type $build 
 */
function sbq_commons_node_view_alter(&$build) {
  //for group content contextual_links
  $node = $build['#node'];
  if (!empty($node->nid) && $node->type == 'post') {
    $build['#contextual_links']['node'] = array('node', array($node->nid));
  }
}

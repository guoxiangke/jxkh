<?php
/**
 * 1.must have rate name vote_sbq_topic.
 */

// 医生群体关注
define('FOLLOWER_DOCTOR', 1);
// 病人群体关注
define('FOLLOWER_PATIENT', 2);
// 医患群体关注
define('FRIEND_DOCTOR_PATIENT', 3);


/**
 * Implements hook_form_alter().
 */
function sbq_commons_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form);
  if(isset($form['comment_body'])){
    $form['comment_body'][LANGUAGE_NONE][0]['#title'] = t('Comment');
  }  
  if(isset($form['body'])){
    $form['body'][LANGUAGE_NONE][0]['#title'] = t('Body');
  }
  if(isset($form['field_tags'])){
    $form['field_tags'][LANGUAGE_NONE]['#title'] = t('Tags');
  }
  if(isset($form['field_image'])){
    $form['field_image'][LANGUAGE_NONE]['#title'] = t('image');
  }
    //hide no use of comment of sbq_topic
    if ($form_id == 'comment_node_sbq_topic_form') {
        $form['subject']['#access'] = FALSE;
        $form['author']['#access'] = FALSE;
        $form['actions']['submit']['#value'] = '发表观点';
        $form['actions']['preview']['#access'] = FALSE;
        // $form['comment_body'][LANGUAGE_NONE][0]['#title'] = '';
        $form['comment_body'][LANGUAGE_NONE][0]['#default_value'] = '我支持的观点：禁止发布含有辱骂、国情等敏感词汇';
        // vote logic  for topic!
        $node = $form['#node'];
        $rate_widget_id = sbq_commons_get_rid_by_name('vote_sbq_topic');
        if ($rate_widget_id)
        $rate_result = rate_get_results('node', $node->nid, $rate_widget_id);
        
        if(isset($rate_result['user_vote'])) {
          $form['sbq_topic_voted'] = array('#type' => 'hidden', '#value' => 0);
          switch ($rate_result['user_vote']) {
            case '支持':
              $form['field_field_sbq_topic_type'][LANGUAGE_NONE]['#default_value'] = 1;
              $form['sbq_topic_voted'] = array('#type' => 'hidden', '#value' => 1);
              break;
            case '反对':
              $form['field_field_sbq_topic_type'][LANGUAGE_NONE]['#default_value'] = 0;
              $form['sbq_topic_voted'] = array('#type' => 'hidden', '#value' => -1);
              break;
            default:
              # code...
              break;
          }
        }
    }
    //hide profle when register
    if ($form_id == 'user_register_form') {
        $form['profile_doctor_profile']['#access'] = FALSE;
        $form['profile_customer_profile']['#access'] = FALSE;
        // unset($form['profile_doctor_profile']);
    }

    if ( $form_id == 'user_login_block') {
        # code...
        $form['actions']['#prefix'] = '<div class="input-prepend input-append">';
        $form['actions']['#suffix'] = '</div>';
        $form['links']['#markup'] = '<ul>
                        <li class="last">
                        <a href="/user/password" title="'.t('Request new password via e-mail.').'">
                        '.t('Request new password').'
                        </a></li></ul>';
        $form['links']['#weight'] = '100';
    }
}

function sbq_commons_get_rid_by_name($name) {
  $rate_widget_id = FALSE;
  $rate_widgets = variable_get('rate_widgets', NUll);
    if(is_array($rate_widgets)) {
      foreach ($rate_widgets as $rid => $rate) {
        if($rate->name == $name) {
            $rate_widget_id = $rid;
            break;
        }              
    }
  }
  return $rate_widget_id;
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function sbq_commons_form_comment_form_alter(&$form, &$form_state, $form_id) {
  
  // Check to see if this node type uses ajax comments.
  if (!ajax_comments_node_type_active($form['#node']->type)) {
    return;
  }
  if ($form['#node']->type != 'sbq_topic') {
    return;
  }
  // child comment ajax behavior
  if(isset($form['pid']['#value'])) {
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'ajax_comments_submit_js4child',
      'wrapper' => $form['#id'],
      'method' => 'replace',
      'effect' => 'fade',
      'file' => 'sbq_commons.inc',
    );
  }else {// main comment ajax behavior
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'ajax_comments_submit_js4sbq',
      'wrapper' => $form['#id'],
      'method' => 'replace',
      'effect' => 'fade',
      'file' => 'sbq_commons.inc',
    );
  }
  // HACK, stop ctools from modifying us in node_comment_form.inc
  $form_state['ctools comment alter'] = FALSE;
  // dpm($form);
}

/**
 * Implements hook_init().
 */
function sbq_commons_init() {
    // Load sbq_commons.inc from the node module.
  drupal_add_js(drupal_get_path('module', 'sbq_commons').'/js/sbq-commons.js');
    module_load_include('inc', 'sbq_commons', 'sbq_commons');
    if(arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if($node && $node->type == 'sbq_topic') {
        drupal_add_css(drupal_get_path('module', 'sbq_commons').'/css/topic-page.css');
        drupal_add_js(drupal_get_path('module', 'sbq_commons').'/js/topic-page.js');
      }
    }
}


/**
 * Implements hook_admin_paths_alter().
 */
function sbq_commons_admin_paths_alter(&$paths) {
    // Treat all user pages as administrative.
    /*
     * $paths['user'] = TRUE;
     * $paths['user/*'] = TRUE;
     */
    // Treat the forum topic node form as a non-administrative page.
    /*
     * $paths['node/add/forum'] = FALSE;
     */
    $paths['node/add'] = FALSE;
    $paths['node/add/*'] = FALSE;
}

/**
 * Implements hook_preprocess_page().
  TODO:1.hide different roles access to tab of relationships user/%/relationships/1|2|3
  2.rewrite access to create relationships menu. user hook_menu_alter()
 */
function sbq_commons_preprocess_page(&$variables) {
    global $user;
    if (arg(0) == 'user' && (arg(2) == 'relationships')) {
        if (in_array('doctor', $user->roles)) {
            if (isset($variables['tabs']['#secondary'][4])) {
                unset($variables['tabs']['#secondary'][4]);
            }
        } elseif (in_array('patient', $user->roles)) {
            if (isset($variables['tabs']['#secondary'][3])) {
                unset($variables['tabs']['#secondary'][3]);
            }
        }
    }
    return $variables;
}

/**
 * Implements hook_user_view().
 * @see // function user_relationships_ui_user_view($account, $view_mode) {
  TODO: hide dc-ur for c2c or d2d | hide not use of UR in when see others page.different roles
 */
function sbq_commons_user_view($account, $view_mode, $langcode) {
    global $user;
    // dpm($user);
    if (($account->uid == $user->uid) && user_relationships_user_access('maintain @relationship relationships')) {
        _user_relationships_ui_set_notifications($account);
        return;
    }

    $output = array();
    if ($list = user_relationships_ui_actions_between($user, $account, array('remove' => 1))) {
        $output['relations'] = array(
            '#title' => t('Your relationships to this user'),
            '#type' => 'user_profile_item',
            '#markup' => theme('item_list', array('items' => $list)),
            '#attributes' => array('class' => array('user_relationships_ui')),
        );
    }

    if ($actions = sbq_commons_relationships_ui_actions_between($user, $account)) {
        $output['actions'] = array(
            '#title' => t('Relationship actions'),
            '#type' => 'user_profile_item',
            '#markup' => theme('item_list', array('items' => $actions)),
            '#attributes' => array('class' => array('user_relationships_ui_actions')),
        );
    }
    if (sizeof($output)) {
        $account->content['user_relationships_ui'] = array(
            '#type' => 'user_profile_category',
            '#title' => t('Relationships'),
            '#weight' => 10,
        );
        $account->content['user_relationships_ui'] = array_merge($account->content['user_relationships_ui'], $output);
    }
}

/**
 * Implements hook_menu_alter().
 */
function sbq_commons_menu_alter(&$items) {
    foreach (user_relationships_types_load() as $rtid => $relationship) {
        $items["relationship/%user/request/{$rtid}"] = array(
            'title' => $relationship->rtid,
            'title callback' => 'user_relationships_ui_title_callback',
            'type' => MENU_CALLBACK,
            'access callback' => 'sbq_commons_relationships_ui_check_access',
            'access arguments' => array('request', 1, 3),
            'page callback' => 'user_relationships_ui_request_ajax',
            'page arguments' => array(1),
            'file' => drupal_get_path('module', 'user_relationships_ui') . '/user_relationships_ui.forms.inc',
        );
    }
}

/**
 * relationships_ui_check_access 
 */
function sbq_commons_relationships_ui_check_access($type, $account = NULL, $relationship_type = NULL) {
    global $user;
    if (!is_object($account)) {
        $account = $user;
    }
    if (!is_object($relationship_type)) {
        $relationship_type = user_relationships_type_load($relationship_type);
    }

    if (user_access('administer user relationships')) {
        return TRUE;
    }

    // If the user does not any have permission, deny access.
    if (!user_relationships_can_receive($account)) {
        return FALSE;
    }

    switch ($type) {
        case 'view':
            // First check if it is the current user and if he has view own
            // permission.
            if ($account->uid == $user->uid && user_relationships_user_access('view own @relationship relationships', $relationship_type)) {
                return TRUE;
            }

            // If this is a different user or he doesn't have that permission,
            // check the view all permission.
            if (user_relationships_user_access('view all @relationship relationships', $relationship_type)) {
                return TRUE;
            }
            break;
        case 'approve':
            // Only the administer permission allows to approve, request, delete
            // relationships for other users, which was already checked.
            if ($account->uid == $user->uid && user_relationships_user_access('maintain @relationship relationships', $relationship_type)) {
                return TRUE;
            }
            break;
        case 'request':
            return sbq_commons_relationships_ui_check_access_by_roles($user, $account, $relationship_type->rtid);
            break;
        case 'delete':
            // Do not allow access if this is a oneway relationship requested by another user.
            // if (is_object($relationship_type) && $relationship_type->is_oneway && $relationship_type->requester_id != $user->uid) {
            //   return FALSE;
            // }
            if ($account->uid == $user->uid && user_relationships_user_access('delete @relationship relationships', $relationship_type)) {
                return TRUE;
            }
            break;
    }
    return FALSE;
}
/**
 * use user-roles check_access 
 */
function sbq_commons_relationships_ui_check_access_by_roles($user, $account, $relationship) {
    if (in_array('doctor', $user->roles)) {
        if (in_array('doctor', $account->roles) && $relationship == FOLLOWER_DOCTOR) {
            return TRUE;
        } elseif (in_array('patient', $account->roles) && $relationship == FRIEND_DOCTOR_PATIENT) {
            # code...
            return TRUE;
        }
    } elseif (in_array('patient', $user->roles)) {
        # code...
        if (in_array('patient', $account->roles) && $relationship == FOLLOWER_PATIENT) {
            return TRUE;
        } elseif (in_array('doctor', $account->roles) && $relationship == FRIEND_DOCTOR_PATIENT) {
            # code...
            return TRUE;
        }
    }
    return FALSE;
}
/**
 * @see user_relationships_ui_actions_bwtween
 */
function sbq_commons_relationships_ui_actions_between($viewer, $viewed) {
    $action = 0;
    foreach (array(FOLLOWER_DOCTOR, FOLLOWER_DOCTOR, FRIEND_DOCTOR_PATIENT) as $v) {
        if (sbq_commons_relationships_ui_check_access_by_roles($viewer, $viewed, $v)) {
            $action = $v;
        }
    }
    if ($viewer->uid == $viewed->uid) {
        return;
    }
    $list = array();
    $type = user_relationships_types_load();
    if ($action == FRIEND_DOCTOR_PATIENT) {
        $relationships = $type[$action];
        $list[] = t('You have sent a new @rel_name request to this user. (!pending_requests)', array(
            '!pending_requests' => l(t('pending requests'), "relationships/sent"),
                ) + user_relationships_type_translations($relationships));
    }
    if ($action == FOLLOWER_DOCTOR || $action == FOLLOWER_PATIENT) {
        $relationship = $type[$action];
        if ($relationship) {
            // If configured, create direct links.
            if (variable_get('user_relationships_show_direct_links', 1)) {
                // Create a single link, or one for each relationship type.
                $list[] = theme('user_relationships_request_relationship_direct_link', array('relate_to' => $viewed, 'relationship_type' => $relationship));
            }
            // just one generic link pointing to a page with dropdown.
            else {
                $list[] = theme('user_relationships_request_relationship_link', array('relate_to' => $viewed));
            }
        }
    }
    return $list;
}
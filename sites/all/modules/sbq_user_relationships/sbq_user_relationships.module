<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

function sbq_user_relationships_menu() {

  $items['user/%user/relationship'] = array(
      'title' => t('我的圈子'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'sbq_user_relationships_follow_view',
      'page arguments' => array( 'default', 1 ),
      'access callback' => 'sbq_user_relationships_access_callback',
      'access arguments' => array( 1 ),
      'file' => 'sbq_user_relationships.inc',
  );
  $items['user/%user/relationship/default'] = array(
      'title' => t('我的圈子'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1,
  );
  $items['user/%user/relationship/default/doctor'] = array(
      'title' => t('我的医生圈'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['user/%user/relationship/default/patient'] = array(
      'title' => t('我的病友圈'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'sbq_user_relationships_follow_view',
      'page arguments' => array( 'patient', 1 ),
      'access callback' => 'sbq_user_relationships_access_callback',
      'access arguments' => array( 1 ),
      'file' => 'sbq_user_relationships.inc',
  );

  $items['user/%user/relationship/recommand/doctor'] = array(
      'title' => t('推荐医生'),
      'type' => MENU_LOCAL_TASK,
      'page arguments' => array( 'recommand_doctor', 1 ),
      'access callback' => 'sbq_user_relationships_access_callback',
      'file' => 'sbq_user_relationships.inc',
      'access arguments' => array( 1 ),
      'weight' => 2,
  );

  $items['user/%user/relationship/recommand/patient'] = array(
      'title' => t('推荐病友'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'sbq_user_relationships_follow_view',
      'page arguments' => array( 'recommand_patient', 1 ),
      'access callback' => 'sbq_user_relationships_access_callback',
      'access arguments' => array( 1 ),
      'file' => 'sbq_user_relationships.inc',
      'weight' => 3,
  );

  foreach (array( 4 => 'received', 5 => 'sent' ) as $key => $item) {
    $items['user/%user/relationship/default/' . $item] = array(
        'title callback' => 'sbq_user_relationships_title_callback',
        'title arguments' => array( $item ),
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'sbq_user_relationship_pending_page',
        'page arguments' => array( $item, 1 ),
        'access callback' => 'sbq_user_relationships_access_callback',
        'access arguments' => array( 1 ),
        'file' => 'sbq_user_relationships.inc',
        'weight' => $key,
    );
  }

  foreach (array( 'cancel', 'approve', 'disapprove' ) as $key => $item) {
    $items['user/%user/relationship/action/%user_relationships/' . $item] = array(
        'delivery callback' => 'ajax_deliver',
        'type' => MENU_CALLBACK,
        'access callback' => 'sbq_user_relationships_access_callback',
        'access arguments' => array( 1 ),
        'page callback' => 'sbq_user_relationships_ui_pending_requested_ajax',
        'page arguments' => array( 1, 4, 5 ),
        'file' => 'sbq_user_relationships.inc',
    );
  }

  // 关注
  $items['relationship/ajax/%/request/%/%'] = array(
      'delivery callback' => 'ajax_deliver',
      'title' => 'Create a relationship',
      'type' => MENU_CALLBACK,
      'access callback' => 'user_relationships_ui_check_access',
      'access arguments' => array( 'request' ),
      'page callback' => 'sbq_user_relationships_ui_request_ajax',
      'page arguments' => array( 2, 4, 5 ),
      'file' => 'sbq_user_relationships.inc',
  );
  // 移除
  $items['relationship/ajax/%/remove/%/%'] = array(
      'delivery callback' => 'ajax_deliver',
      'title' => 'Remove relationship',
      'access callback' => 'user_relationships_ui_check_access',
      'access arguments' => array( 'delete' ),
      'page callback' => 'sbq_user_relationships_ui_remove_ajax',
      'page arguments' => array( 2, 4, 5 ),
      'type' => MENU_CALLBACK,
      'file' => 'sbq_user_relationships.inc'
  );

  return $items;
}

/*
 * sbq access callback
 */

function sbq_user_relationships_access_callback($account = NULL) {
  global $user;
  if ($account === NULL) {
    $account = $user;
  } elseif (!is_object($account)) {
    $account = user_load($account);
  }
  if ($user->uid == 1 || $user->uid == $account->uid) {
    return TRUE;
  }
  return FALSE;
}

/*
 * title callback
 */

function sbq_user_relationships_title_callback($item) {
  switch ($item) {
    case 'sent':
      $item = t('我发送的请求');
      break;
    case 'received':
      $item = t('需要处理的请求');
      break;
    default:
      break;
  }

  return $item;
}

/*
 * hook_block_info
 */

function sbq_user_relationships_block_info() {
  $blocks['follow_doctor'] = array(
      'info' => t('user relationships:follow_doctor'),
      'cache' => DRUPAL_NO_CACHE,
//      'status' => 1,
//      'visibility' => BLOCK_VISIBILITY_LISTED,
//      'pages' => 'my/relationships/default',
  );
  $blocks['follow_patient'] = array(
      'info' => t('user relationships:follow_patient'),
      'cache' => DRUPAL_NO_CACHE,
//      'status' => 1,
//      'visibility' => BLOCK_VISIBILITY_LISTED,
//      'pages' => 'my/relationships/default',
  );

  return $blocks;
}

function sbq_user_relationships_block_view($delta = '') {
  global $user;
  if (!$user->uid) {
    return;
  }
  switch ($delta) {
    case 'follow_doctor':
      $block['subject'] = t('我的医生圈');
      $block['content'] = sbq_user_relationships_follow($user, USER_CERTIFIED_DOCTOR_RID);
      break;
    case 'follow_patient':
      $block['subject'] = t('我的病友圈');
      $block['content'] = sbq_user_relationships_follow($user, USER_PATIENT_RID);
      break;
    default:
      break;
  }
  return $block;
}

function sbq_user_relationships_theme() {
  $tpls = array(
      'sbq_user_relationships_list' => array(
          'template' => 'templates/sbq--user--relationships--list',
          'variables' => array( 'accounts' => array() )
      ),
      'sbq_user_relationships_profile' => array(
          'template' => 'templates/sbq--user--relationships--profile',
          'variables' => array(
              'image' => '',
              'profile' => array()
          )
      ),
  );
  $items = array(
//      'sbq_user_relationships_approval_status',
//      'sbq_user_relationships_request_relationship_link',
//      'sbq_user_relationships_request_relationship_direct_link',
      'sbq_user_relationships_remove_link',
      'sbq_user_relationships_pending_request_approve_link',
      'sbq_user_relationships_pending_request_disapprove_link',
      'sbq_user_relationships_pending_request_cancel_link',
//      'sbq_user_relationships_user_link',
      'sbq_user_relationships_add_user_link',
      'sbq_user_relationships_process_status'
  );
  foreach ($items as $key => $value) {
    $tpls[$value]['file'] = 'sbq_user_relationships_ui.theme.inc';
    $tpls[$value]['variables'] = array( 'uid' => NULL, 'rid' => NULL, 'vid' => NULL );
  }
  return $tpls;
}

/*
 * 圈子用户profile
 * @todo remove test data
 */

function sbq_user_relationships_profile($info) {
  module_load_include('inc', 'sbq_commons', 'sbq_commons_og_ui');
  $account = $info['user'];
  $image = sbq_commons_user_avart($account);
  $profile['name'] = $account->name;
  if (module_exists('user_badges')) {
    $profile['bedges'] = user_badges_for_uid($account->uid);
  }
  $profile['follow'] = $info['relstionship_action'];
  if (in_array(USER_PATIENT_RID, array_keys($account->roles))) {
    if ($user_item = profile2_load_by_user($account, 'customer_profile') && !empty($user_item) && isset($user_item->field_tags_disease['und'])) {
      foreach ($user_item->field_tags_disease['und'] as $tid) {
        $term = taxonomy_term_load($tid);
        $account_disease .= $term->name . ' ';
        $profile['disease'] = $account_disease;
      }
    }
  } elseif (in_array(USER_CERTIFIED_DOCTOR_RID, array_keys($account->roles))) {
    if ($user_item = profile2_load_by_user($account, 'doctor_profile') && !empty($user_item) && isset($user_item->field_doctor_hospitals['und'])) {
      foreach ($user_item->field_doctor_hospitals['und'] as $tid) {
        $term = taxonomy_term_load($tid);
        $hospital .= $term->name . ' ';
        $profile['hospital'] = $hospital;
      }
    }
  }

  $items = $profile;
  unset($profile);
  $profile['name'] = $items['name'];
  $profile['bedges'] = $items['bedges'];
  if (isset($items['hospital'])) {
    $profile['hospital'] = $items['hospital'];
  }
  if (isset($items['disease'])) {
    $profile['disease'] = $items['disease'];
  }
  $profile['follow'] = $items['follow'];
  $build = theme('sbq_user_relationships_profile', array( 'image' => $image,
      'profile' => $profile ));

  return $build;
}

/*
 *  recommond doctor patient
 */

function sbq_user_relationships_recommond($account = NULL, $roles, $is_page = TRUE, $count_of_page = 12) {

  if (!$account) {
    global $user;
    $account = $user;
  } elseif (!is_object($account)) {
    $account = user_load($account);
  }
  if ($roles) {

    $query = "SELECT uid from {users_roles} roles "
        . "where roles.uid NOT IN "
        . "(SELECT r.requestee_id FROM {user_relationships} r WHERE r.requester_id = {$account->uid}) "
        . "and  roles.rid={$roles} and roles.uid <> {$account->uid}";
  } else {
    $query = "SELECT uid from {users_roles} roles "
        . "where roles.uid NOT IN "
        . "(SELECT r.requestee_id FROM {user_relationships} r WHERE r.requester_id = {$account->uid}) "
        . "roles.uid NOT IN ( SELECT e.requester_id FROM {user_relationships} e where e.requestee_id = {$account->uid}) "
        . "and  roles.rid IN (" . USER_PATIENT_RID . "," . USER_CERTIFIED_DOCTOR_RID . " ) "
        . "and roles.uid <> {$account->uid}";
  }
  if ($is_page) {
    $query .= " ORDER BY uid ASC ";
    $pages = pager_default_initialize(db_query($query)->rowCount(), $count_of_page);
    $result = db_query_range($query, $pages * $count_of_page, $count_of_page)->fetchAllAssoc('uid');
  } else {
    $result = db_query($query)->fetchAllAssoc('uid');
  }

  return user_load_multiple(array_keys($result));
}

/*
 * between user actions
 */

function sbq_user_relationships_action_between_user($viewer, $viewed, $action_types = NULL) {
  drupal_add_library('system', 'drupal.ajax');
  module_load_include('inc', 'sbq_user_relationships', 'sbq_user_relationships_ui.theme');
  if ($viewer->uid == $viewed->uid) {
    return;
  }
  if (!$action_types) {
    $action_types = array(
        'add' => 1,
        'remove' => 1,
        'requested' => 1,
        'received' => 1
    );
  }
  $list = array();
  module_load_include('inc', 'user_relationships_ui', 'user_relationships_ui.forms');
  if (isset($action_types['requested'])) {
    $relationships = user_relationships_load(array( 'requester_id' => $viewer->uid,
        'requestee_id' => $viewed->uid, 'approved' => FALSE ));
    foreach ($relationships as $relationship) {
      $list[] = t('You have sent a new @rel_name request to this user. (!pending_requests)', array(
          '!pending_requests' => l(t('pending requests'), "relationships/sent"),
          ) + user_relationships_type_translations($relationship));
    }
  }

  if (isset($action_types['received'])) {
    $relationships = user_relationships_load(array(
        'requester_id' => $viewed->uid,
        'requestee_id' => $viewer->uid,
        'approved' => FALSE ));
    foreach ($relationships as $relationship) {
      if (user_relationships_user_access('maintain @relationship relationships', $relationship)) {
        $list[] = t('This user has requested to be your @rel_name. (!pending_requests)', array(
            '!pending_requests' => l(t('pending requests'), "user/{$viewer->uid}/relationships/received"),
            ) + user_relationships_type_translations($relationship));
        $list[] = t('This user has requested to be your @rel_name. (!approve_requests, !dis_approve_requests)', array(
            '!approve_requests' => l('同意', 'relationship/ajax/' . $viewer->uid . '/pending/' . $relationship->rid . '/' . $viewed->uid . '/approve', array(
                'html' => TRUE,
                'attributes' => array(
                    'class' => array(
                        'relationship_ajax_action' ) ),
                )
            ),
            '!dis_approve_requests' => l('拒绝', 'relationship/ajax/' . $viewer->uid . '/pending/' . $relationship->rid . '/' . $viewed->uid . '/disapprove', array(
                'html' => TRUE,
                'attributes' => array(
                    'class' => array(
                        'relationship_ajax_action' ) ),
                )
            )
            )
        );
      }
    }
  }


  if (isset($action_types['add'])) {
    $relationships = user_relationships_get_requestable_rtypes($viewer, $viewed, 'full');
    if ($relationships) {
      // If configured, create direct links.
      if (variable_get('user_relationships_show_direct_links', 1)) {
        // Create a single link, or one for each relationship type.
        foreach ($relationships as $relationship) {
          if (sbq_commons_relationships_ui_check_access_by_roles($viewer, $viewed, $relationship->rtid)) {
            if (sbq_commons_relationships_ui_request_validate($viewer, $viewed, $relationship->rtid)) {
              $list[] = array(
                  'relationship_type' => $relationship->name,
                  'relationship_action' => theme('sbq_user_relationships_add_user_link', array(
                      'uid' => $viewer->uid, 'rid' => $relationship->rtid, 'vid' => $viewed->uid ))
              );
            }
          }
        }
      }
      // just one generic link pointing to a page with dropdown.
      else {
        $list[] = theme('user_relationships_request_relationship_link', array(
            'relate_to' => $viewed ));
      }
    }
  }

  if (isset($action_types['remove'])) {
    $relationships = user_relationships_load(array(
        'between' => array(
            $viewer->uid,
            $viewed->uid ) ));
    foreach ($relationships as $relationship) {
      if ($relationship->approved && !isset($list[$relationship->rid]) && user_relationships_ui_check_access('view', NULL, $relationship)) {
        if (user_relationships_ui_check_access('delete', NULL, $relationship)) {
          // @see user_relationships_remove_link
//          $list[$relationship->rid] = t('@rel_name (!remove_link)', array(
//              '@rel_name' => user_relationships_type_get_name($relationship) . ($relationship->is_oneway ? ($relationship->requester_id == $viewer->uid ? t(' (You to Them)') : t(' (Them to You)')) : NULL),
//              '!remove_link' => l(t('移除'), 'relationship/ajax/' . $viewer->uid . '/remove/' . $relationship->rid . '/' . $viewed->uid, array(
//                  'attributes' => array(
//                      'class' => array(
//                          'class' => 'relationship_ajax_action' ) ) )),
//              //   '!remove_link' => drupal_get_form('sbq_user_relationships_ui_remove_ajax', $viewer, $relationship)
//          ));

          $list[] = array(
              'relationship_type' => $relationship->name,
              'relationship_action' => theme_sbq_user_relationships_remove_link(array(
                  'uid' => $viewer->uid, 'rid' => $relationship->rtid, 'vid' => $viewed->uid ))
          );
        } else {
          $list[$relationship->rid] = user_relationships_type_get_name($relationship) . ($relationship->is_oneway ? ($relationship->requester_id == $viewer->uid ? t(' (You to Them)') : t(' (Them to You)')) : NULL);
        }
      }
    }
  }


  return $list;
}

/*
 * get my doctor/patient  friends count
 */

function sbq_user_relationships_my_relstionships($account = NULL) {
  global $user;
  if (!$account) {
    $account = $user;
  }
  $no_approved = 0;
  $options = array(
      'include_user_info' => TRUE,
  );
  $approved = user_relationships_load(array( 'user' => $account->uid, 'approved' => 1, 'rtid' => 3 ), $options);

  if (in_array(USER_PATIENT_RID, array_keys($account->roles))) {
    $no_approved = user_relationships_load(array( 'user' => $account->uid, 'rtid' => 2 ), $options);
    $return = array(
        'patient_count' => count($no_approved),
        'doctor_count' => count($approved),
        'all' => count($no_approved) + count($approved),
    );
  } else if (in_array(USER_CERTIFIED_DOCTOR_RID, array_keys($account->roles))) {
    $no_approved = user_relationships_load(array( 'user' => $account->uid, 'rtid' => 1 ), $options);
    $return = array(
        'doctor_count' => count($no_approved),
        'patient_count' => count($approved),
        'all' => count($no_approved) + count($approved),
    );
  }
  return $return;
}

/*
 * @see user_relationships_page
 */

function sbq_user_relstionships_users($account = NULL, $rtid = NULL, $page_of_nums = 12) {
  global $user;
  if (!$account || !is_object($account) || !$account->uid) {
    $account = $user;
  }

  // Check if this is a valid rtid.
  if (!empty($rtid) && !user_relationships_type_load($rtid)) {
    return MENU_NOT_FOUND;
  }

  $args = array( 'user' => $account->uid, 'approved' => TRUE );
  $relationship_type = NULL;
  if (!empty($rtid)) {
    $relationship_type = user_relationships_type_load($rtid);
    $args['rtid'] = $rtid;
  } else {
    // Get hidden relationships.
    $hidden = db_query('SELECT rtid FROM {user_relationships_ui_settings} WHERE hide = 1')->fetchCol();
    if (!empty($hidden)) {
      $args['exclude_rtids'] = $hidden;
    }
  }

  $options = array(
      'include_user_info' => TRUE,
      'paging' => variable_get('user_relationships_relationships_per_page', $page_of_nums),
  );

  $relationships = user_relationships_load($args, $options);

  $rows = array();
  foreach ($relationships as $relationship) {
    $rows[$relationship->rid] = sbq_user_relationships_user_action($relationship, $account);
  }
  return $rows;
}

/**
 * 
 * @global type $user
 * @param type $relationship
 * @param type $account
 * @return type
 */
function sbq_user_relationships_user_action($relationship, $account) {
  global $user;

  $this_user_str = $account->uid == $relationship->requestee_id ? 'requester' : 'requestee';
  $this_user = $relationship->{$this_user_str};
  $row = array(
      'user' => $this_user,
      check_plain(user_relationships_type_get_name($relationship, FALSE, $relationship->is_oneway && $this_user_str == 'requester')),
  );
  $permission = $account->uid == $relationship->requestee_id ? 'request' : 'approve';
  $links = array();
  if ($relationship->approved) {
    if (user_relationships_ui_check_access('delete', $account, $relationship)) {
      $links[] = theme('sbq_user_relationships_remove_link', array( 'uid' => $account->uid,
          'rid' => $relationship->rid, 'vid' => $relationship->{$this_user_str . '_id'} ));
    }
  } elseif (user_relationships_ui_check_access($permission, $account, $relationship)) {
    if ($this_user_str == 'requestee') {
      // Sent requests, display cancel link.
      $links[] = theme('sbq_user_relationships_pending_request_cancel_link', array(
          'uid' => $account->uid,
          'rid' => $relationship->rid,
          'vid' => $relationship->{$this_user_str . '_id'} ));
    } else {
      // Received requests, display approve and decline links.
      $links[] = theme('sbq_user_relationships_pending_request_approve_link', array(
          'uid' => $account->uid, 'rid' => $relationship->rid, 'vid' => $relationship->{$this_user_str . '_id'} ));
      $links[] = theme('sbq_user_relationships_pending_request_disapprove_link', array(
          'uid' => $account->uid, 'rid' => $relationship->rid, 'vid' => $relationship->{$this_user_str . '_id'} ));
    }
  }
  if (!empty($links)) {
    $row[] = implode(' ', $links);
  }
  if (variable_get('user_relationships_show_user_pictures', 0)) {
    array_unshift($row, theme('user_picture', array( 'account' => $this_user )));
  }
  return $row;
}

function sbq_user_relationships_user_login($edit, $account) {
  //$f = drupal_set_message();
  //dpm($f);
}

//hook_menu_alter()
function sbq_user_relationships_menu_alter(&$items) {
  foreach (array( 'received', 'sent' ) as $item) {
    $items['relationships/' . $item] = array(
        'page callback' => 'sbq_user_relationships_redirect',
        'page arguments' => array( 1 ),
        'access callback' => TRUE,
    );
  }
}

function sbq_user_relationships_redirect($type) {
  global $user;
  menu_set_active_item('user/' . $user->uid . '/relationship/default/' . $type);
  return menu_execute_active_handler(NULL, FALSE);
}

function sbq_user_relationships_user_delete($account) {
  $relstionships = user_relationships_load(array( 'user' => $account->uid ));
  foreach ($relstionships as $rel) {
    user_relationships_delete_relationship($rel, $account->uid);
  }
}

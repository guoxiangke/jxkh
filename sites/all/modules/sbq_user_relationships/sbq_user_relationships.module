<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

function sbq_user_relationships_menu() {

  $items['user/%user/relationship'] = array(
      'title' => t('我的圈子'),
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'sbq_user_relationships_follow_view',
      'page arguments' => array( 'default', 1 ),
      'access callback' => 'sbq_user_relationships_access_callback',
      'access arguments' => array( 1 ),
      'file' => 'sbq_user_relationships.inc',
  );
  $items['user/%user/relationship/default'] = array(
      'title' => t('我的圈子'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1,
  );
  $items['user/%user/relationship/default/doctor'] = array(
      'title' => t('我的医生圈'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['user/%user/relationship/default/patient'] = array(
      'title' => t('我的病友圈'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'sbq_user_relationships_follow_view',
      'page arguments' => array( 'patient', 1 ),
      'access callback' => 'sbq_user_relationships_access_callback',
      'access arguments' => array( 1 ),
      'file' => 'sbq_user_relationships.inc',
  );

  $items['user/%user/relationship/recommand/doctor'] = array(
      'title' => t('推荐医生'),
      'type' => MENU_LOCAL_TASK,
      'page arguments' => array( 'recommand_doctor', 1 ),
      'access callback' => 'sbq_user_relationships_access_callback',
      'file' => 'sbq_user_relationships.inc',
      'access arguments' => array( 1 ),
      'weight' => 2,
  );

  $items['user/%user/relationship/recommand/patient'] = array(
      'title' => t('推荐病友'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'sbq_user_relationships_follow_view',
      'page arguments' => array( 'recommand_patient', 1 ),
      'access callback' => 'sbq_user_relationships_access_callback',
      'access arguments' => array( 1 ),
      'file' => 'sbq_user_relationships.inc',
      'weight' => 3,
  );

  return $items;
}

/*
 * sbq access callback
 */

function sbq_user_relationships_access_callback($account) {
  global $user;
  if ($user->uid == 1 || $user->uid == $account->uid) {
    return TRUE;
  }
  return FALSE;
}

/*
 * hook_block_info
 */

function sbq_user_relationships_block_info() {
  $blocks['follow_doctor'] = array(
      'info' => t('user relationships:follow_doctor'),
      'cache' => DRUPAL_NO_CACHE,
//      'status' => 1,
//      'visibility' => BLOCK_VISIBILITY_LISTED,
//      'pages' => 'my/relationships/default',
  );
  $blocks['follow_patient'] = array(
      'info' => t('user relationships:follow_patient'),
      'cache' => DRUPAL_NO_CACHE,
//      'status' => 1,
//      'visibility' => BLOCK_VISIBILITY_LISTED,
//      'pages' => 'my/relationships/default',
  );

  return $blocks;
}

function sbq_user_relationships_block_view($delta = '') {
  global $user;
  if (!$user->uid) {
    return;
  }
  switch ($delta) {
    case 'follow_doctor':
      $block['subject'] = t('我的医生圈');
      $block['content'] = sbq_user_relationships_follow($user, USER_CERTIFIED_DOCTOR_RID);
      break;
    case 'follow_patient':
      $block['subject'] = t('我的病友圈');
      $block['content'] = sbq_user_relationships_follow($user, USER_PATIENT_RID);
      break;
    default:
      break;
  }
  return $block;
}

function sbq_user_relationships_theme() {
  $tpls = array(
      'sbq_user_relationships_list' => array(
          'template' => 'templates/sbq--user--relationships--list',
          'variables' => array( 'accounts' => array() )
      ),
      'sbq_user_relationships_profile' => array(
          'template' => 'templates/sbq--user--relationships--profile',
          'variables' => array(
              'image' => '',
              'profile' => array(
//                  'bedges' => '',
//                  'name' => '',
//                  'hospital' => '',
//                  'disease' => '',
//                  'follow' => ''
              )
          )
      ),
  );

  return $tpls;
}

/*
 * 圈子用户profile
 * @todo remove test data
 */

function sbq_user_relationships_profile($account) {
  module_load_include('inc', 'sbq_commons', 'sbq_commons_og_ui');
  $image = sbq_commons_user_avart($account);
  $profile['name'] = $account->name;
  if (module_exists('user_badges')) {
    $profile['bedges'] = user_badges_for_uid($account->uid);
  }
  $profile['follow'] = sbq_commons_user_relationships_ajax($account->uid);
//  if($profile['follow']){
//    dpm($profile['follow']);
//  }
  if (in_array(USER_PATIENT_RID, array_keys($account->roles))) {
    if ($user_item = profile2_load_by_user($account, 'customer_profile') && !empty($user_item) && isset($user_item->field_tags_disease['und'])) {
      foreach ($user_item->field_tags_disease['und'] as $tid) {
        $term = taxonomy_term_load($tid);
        $account_disease .= $term->name . ' ';
      }
    }
    if (isset($account_disease)) {
      $profile['disease'] = $account_disease;
    } else {
      $profile['disease'] = '这是测试疾病标签';
    }
  } elseif (in_array(USER_CERTIFIED_DOCTOR_RID, array_keys($account->roles))) {
    if ($user_item = profile2_load_by_user($account, 'doctor_profile') && !empty($user_item) && isset($user_item->field_doctor_hospitals['und'])) {
      foreach ($user_item->field_doctor_hospitals['und'] as $tid) {
        $term = taxonomy_term_load($tid);
        $hospital .= $term->name . ' ';
      }
    }
    if (isset($hospital)) {
      $profile['hospital'] = $hospital;
    } else {
      $profile['hospital'] = '测试北京儿童医院';
    }
  }

  $items = $profile;
  unset($profile);
  $profile['name'] = $items['name'];
  $profile['bedges'] = $items['bedges'];
  if (isset($items['hospital'])) {
    $profile['hospital'] = $items['hospital'];
  }
  if (isset($items['disease'])) {
    $profile['disease'] = $items['disease'];
  }
  $profile['follow'] = $items['follow'];
  return theme('sbq_user_relationships_profile', array( 'image' => $image,
      'profile' => $profile ));
}

/*
 * 我的圈子
 */

function sbq_user_relationships_follow($account = NULL, $roles = NULL, $is_page = TRUE, $count_of_page = 10) {
  if (!$account) {
    global $user;
    $account = $user;
  } elseif (!is_object($account)) {
    $account = user_load($account);
  }
  if ($roles = false) {
    $query = "SELECT uid from {users_roles} roles where roles.uid in (SELECT r.requestee_id FROM {user_relationships} r WHERE r.requester_id = {$account->uid}) and  roles.rid=" . $roles;
  } else {
    $query = "SELECT r.requestee_id as uid FROM {user_relationships} r WHERE r.requester_id = {$account->uid}";
  }
  if ($is_page) {
    $pages = pager_default_initialize(db_query($query)->rowCount(), $count_of_page);
    $result = db_query_range($query, $pages * $count_of_page, $count_of_page)->fetchAllAssoc('uid');
  } else {
    $result = db_query($query)->fetchAllAssoc('uid');
  }
  return user_load_multiple(array_keys($result));
}

/*
 *  recommond doctor patient
 */

function sbq_user_relationships_recommond($account = NULL, $roles, $is_page = TRUE, $count_of_page = 10) {

  if (!$account) {
    global $user;
    $account = $user;
  } elseif (!is_object($account)) {
    $account = user_load($account);
  }
  if ($roles) {
    $query = "SELECT uid from {users_roles} roles "
        . "where roles.uid NOT IN "
        . "(SELECT r.requestee_id FROM {user_relationships} r WHERE r.requester_id = {$account->uid}) "
        . "and roles.uid NOT IN ( SELECT e.requester_id FROM {user_relationships} e where e.requestee_id = {$account->uid}) "
        . "and  roles.rid={$roles} and roles.uid <> {$account->uid}";
  } else {
    $query = "SELECT uid from {users_roles} roles "
        . "where roles.uid NOT IN "
        . "(SELECT r.requestee_id FROM {user_relationships} r WHERE r.requester_id = {$account->uid}) "
        . "roles.uid NOT IN ( SELECT e.requester_id FROM {user_relationships} e where e.requestee_id = {$account->uid}) "
        . "and  roles.rid IN (" . USER_PATIENT_RID . "," . USER_CERTIFIED_DOCTOR_RID . " ) "
        . "and roles.uid <> {$account->uid}";
  }
  if ($is_page) {
    $pages = pager_default_initialize(db_query($query)->rowCount(), $count_of_page);
    $result = db_query_range($query, $pages * $count_of_page, $count_of_page)->fetchAllAssoc('uid');
  } else {
    $result = db_query($query)->fetchAllAssoc('uid');
  }

  return user_load_multiple(array_keys($result));
}

function sbq_user_relationships_preprocess_html() {
  
}

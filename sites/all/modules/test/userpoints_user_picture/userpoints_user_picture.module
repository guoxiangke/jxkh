<?php

define('USERPOINTS_USER_PICTURE', 'userpoints_user_picture');
define('USERPOINTS_USER_PICTURE_TID', 'userpoints_user_picture_tid');

/**
 * Implements hook_permission().
 */
function userpoints_user_picture_permission() {
  return array(
    'userpoints user picture' => array(
      'title' => t('Userpoints User Picture'),
      'description' => t('Allow users to earn points for adding a user picture'),
     ),
  );
}

/*
 * Function: Implementation of hook_userpoints
 */
function userpoints_user_picture_userpoints($op, $params = array()) {
  switch ($op) {
    case 'setting':
      $group = 'userpoints_user_picture';
      $form[$group] = array(
        '#type'        => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed'   => TRUE,
        '#title'       => t('!Points for adding a user picture', userpoints_translation()),        
      );
      if (!variable_get('user_pictures', 0)) {
        $form[$group]['#description'] = t('You must enable user pictures in <a href="!url">Account Settings</a> for this to have any effect.', array('!url' => url('admin/config/people/accounts')));
      }

      $form[$group][USERPOINTS_USER_PICTURE] = array(
        '#type'          => 'textfield',
        '#title'         => t('!Points for adding a user picture', userpoints_translation()),
        '#default_value' => variable_get(USERPOINTS_USER_PICTURE, 0),
        '#size'          => 5,
        '#maxlength'     => 5,
      );
      
      $form[$group][USERPOINTS_USER_PICTURE_TID] = array(
      '#type'          => 'select',
      '#title'         => t('Category'),
      '#default_value' => variable_get(USERPOINTS_USER_PICTURE_TID, 0),
      '#options'       => userpoints_get_categories(),
      '#description'   => t('User Picture points will be assigned to this category. You can modify what categories are available by modifying the <a href="!url">Userpoints taxonomy</a>.', 
        array('!url' => url('admin/structure/taxonomy/userpoints'))),
      );
      return $form;
  }
}

/*
 * Implementation of hook_user_update().
 */
function userpoints_user_picture_user_update(&$edit, &$account, $category = NULL) {
 global $user;
 
 // Check that user pictures are enabled
 if (!variable_get('user_pictures', 0)){
   return;
 }
 
 // Check user has access to earn points for user picture
 if (!user_access('userpoints user picture')) {
  return;
 }
 
  $params = array(
    'uid'         => $user->uid,'entity_id'   => $user->uid,
    'entity_type' => 'user',
    'tid'         => variable_get(USERPOINTS_USER_PICTURE_TID, 0),
  );
 
 if ((empty($user->picture)) && $file = file_save_upload('picture_upload')) {
       // Award the points
       $params['points'] = variable_get(USERPOINTS_USER_PICTURE, 0);
       $params['operation'] = 'userpoints_user_picture_added';
 }
 elseif ((!empty($user->picture)) && !empty($edit['picture_delete'])) {
       // Subtract the points
       $params['points'] = -(variable_get(USERPOINTS_USER_PICTURE, 0));
       $params['operation'] = 'userpoints_user_picture_deleted';
  }
  userpoints_userpointsapi($params);
}

/**
 * Implements hook_userpoints_info().
 */
function userpoints_user_picture_userpoints_info() {
  return array(
    'userpoints_user_picture_added' => array(
      'description' => t('User Picture Added'),
    ),
    'userpoints_user_picture_deleted' => array(
      'description' => t('User Picture Deleted'),
    ),
  );
}

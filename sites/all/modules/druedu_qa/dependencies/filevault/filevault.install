<?php
/**
 * @file
 * Install for a basic entity - need to create the base table for our entity.
 * This table can have as many columns as you need to keep track of
 * entity-specific data that will not be added via attached fields.
 * The minimum information for the entity to work is an id and an entity name.
 */

/**
 * Implements hook_schema().
 */
function filevault_schema() {
  $schema = array();

  // The name of the table can be any name we choose. However, namespacing the
  // table with the module name is best practice.
  $schema['filevault_files'] = array(
    'description' => 'The base table for the File Vault.',
      'fields' => array(
        'id' => array(
          'description' => 'Primary key of the File Vault.',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        // Additional properties are just things that are common to all
        // entities and don't require field storage.
        'vid' => array(
          'description' => 'File Vault version id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'filename' => array(
          'description' => 'File name',
          'type' => 'text',
          'not null' => TRUE,
          'size' => 'normal',
        ),
        'size' => array(
          'description' => 'File size',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'size' => 'big',
        ),
        'uri' => array(
          'description' => 'Drupal Uri',
          'type' => 'text',
          'not null' => TRUE,
          'size' => 'normal',
        ),
        'fid' => array(
          'description' => 'Drupal Uri',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'size' => 'normal',
        ),
        'md5' => array(
          'description' => 'MD5 Checksum',
          'type' => 'varchar',
          'length' => 256,
          'default' => "Not implemented yet",
        ),
        'mime_type' => array(
          'description' => 'Mime type',
          'type' => 'text',
          'not null' => TRUE,
          'size' => 'normal',
        ),
        'uid' => array(
          'description' => 'The {users}.uid of the user.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'public' => array(
          'description' => 'Boolean indicating whether the file is public.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
        ),
        'public_dir' => array(
          'description' => 'Directory in the shared space',
          'type' => 'text',
          'not null' => TRUE,
          'size' => 'normal',
        ),
        'private_dir' => array(
          'description' => 'Directory in the private space',
          'type' => 'text',
          'not null' => TRUE,
          'size' => 'normal',
        ),
        'updated' => array(
          'description' => 'The Unix timestamp of the last update',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'created' => array(
          'description' => 'The Unix timestamp of the orginal upload',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
    'primary key' => array('id'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
  );


  $schema['filevault_connected_entities'] = array(
    'description' => 'Connected entities for the File Vault.',
      'fields' => array(
        'id' => array(
          'description' => 'Connection id',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'fv_id' => array(
          'description' => 'File Vault id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'fv_vid' => array(
          'description' => 'File Vault version id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'nid' => array(
          'description' => 'The {node}.nid of the connected node.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'vid' => array(
          'description' => 'Node version id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
      ),
    'primary key' => array('id'),
    'indexes' => array(
      'lookup_file'      => array('fv_id', 'fv_vid'),
    ),
  );


  $schema['filevault_access'] = array(
    'description' => 'User access for the File Vault.',
      'fields' => array(
        'filevault_path_id' => array(
          'description' => 'Path id',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'unsigned' => TRUE,
        ),
        'uid' => array(
          'description' => 'The {users}.uid of the user.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'create_access' => array(
          'description' => 'Create ( Boolean )',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
        ),
        'read_access' => array(
          'description' => 'Read ( Boolean )',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
        ),
        'update_access' => array(
          'description' => 'Update ( Boolean )',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
        ),
        'delete_access' => array(
          'description' => 'Delete ( Boolean )',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
        ),
      ),
    'indexes' => array(
      'lookup_user'      => array('filevault_path_id','uid'),
    ),
    'foreign keys' => array(
      'user_id' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['filevault_path'] = array(
    'description' => 'Lookup table to translate a path into an id for filevault_tree',
      'fields' => array(
        'id' => array(
          'description' => 'Path id',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => 'Fileowner',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'unsigned' => TRUE,
        ),
        'path' => array(
          'description' => 'Path',
          'type' => 'varchar',
          'length' => 2048,         // Max on popular browsers
          'not null' => TRUE,
          'default' => "",
        ),
      ),
    'primary key' => array('id'),
    'indexes' => array(
      'path'      => array('path'),
    ),
    'foreign keys' => array(
      'fileowner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['filevault_tree'] = array(
    'description' => 'Virtual filesystem tree',
      'fields' => array(
        'filevault_path_id' => array(
          'description' => 'Path id',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'unsigned' => TRUE,
        ),
        'filevault_files_id' => array(
          'description' => 'file id',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'unsigned' => TRUE,
        ),
        'name' => array(
          'description' => 'name',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => "Untitled",
        ),
        'type' => array(
          'description' => 'Type',
          'type' => 'char',
          'length' => 1,
          'not null' => TRUE,
          'default' => "D",
        ),
        'updated' => array(
          'description' => 'Updated timestamp',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'unsigned' => TRUE,
        ),
        'created' => array(
          'description' => 'Created timestamp',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'unsigned' => TRUE,
        ),
      ),
    'indexes' => array(
        'path'      => array('filevault_path_id'),
    ),
    'foreign keys' => array(
      'node_revision' => array(
        'table' => 'filevault_path',
        'columns' => array('filevault_path_id' => 'id'),
      ),
    ),
  );

  return $schema;
}

/*
 * Implements hook_uninstall().
 *
 * At uninstall time we'll notify field.module that the entity was deleted
 * so that attached fields can be cleaned up.
 */
function filevault_uninstall() {
  field_attach_delete_bundle('filevault','filevault');
}

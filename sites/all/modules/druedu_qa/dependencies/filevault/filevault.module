<?php

// Include inc files
include_once "filevault.type.inc";
include_once "filevault.type.form.inc";
include_once "filevault.api.inc";

/**
 * Implements hook_menu().
 */
function filevault_menu() {
  $items['filevault'] = array(
    'title' => 'File Vault',
    'page callback' => 'filevault_info_page',
    'access arguments' => array('view any filevault entity'),
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in basic_entity_info() above.
  $items['admin/structure/filevault/manage'] = array(
    'title' => 'Administer the filevault entity type',
    'page callback' => 'filevault_admin_page',
    'access arguments' => array('administer filevault entities'),
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  $items['filevault/file/%filevault'] = array(
    'title callback' => 'filevault_title',
    'title arguments' => array(2),
    'page callback' => 'filevault_view',
    'page arguments' => array(2),
    'access arguments' => array('view any filevault entity'),
  );

  // 'View' tab for an individual entity page.
  $items['filevault/file/%filevault/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['filevault/file/%filevault/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filevault_form', 2),
    'access arguments' => array('edit any filevault entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // Add example entities.
  $items['filevault/file/add'] = array(
    'title' => 'Add an filevault Entity',
    'page callback' => 'filevault_add',
    'access arguments' => array('create filevault entities'),
  );

  return $items;
}

/**
 * Basic information for the page.
 */
function filevault_info_page() {
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The entity example provides a simple example entity.')
  );
  if (user_access('administer filevault entities')) {
    $content['preface']['#markup'] =  t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/filevault/manage'))
    );
  }
  $content['table'] = filevault_list_entities();

  return $content;
}

/**
 * Implements hook_permission().
 */
function filevault_permission() {
  $permissions = array(
    'administer filevault entities' =>  array(
      'title' => t('Administer filevault entities'),
    ),
    'view any filevault entity' => array(
      'title' => t('View any filevault entity'),
    ),
    'edit any filevault entity' => array(
      'title' => t('Edit any filevault entity'),
    ),
    'create filevault entities' => array(
      'title' => t('Create filevault Entities'),
    ),
  );
  return $permissions;
}

/**
 * Provides a list of existing entities and the ability to add more. Tabs
 * provide field and display management.
 */
function filevault_admin_page() {
  $content = array();
  $content[] = array(
    '#type' => 'item',
    '#markup' => t('Administration page for filevault Entities.')
  );

  $content[] = array(
    '#type' => 'item',
    '#markup' => l(t('Add an filevault entity'), 'filevault/file/add'),
  );

  $content['table'] = filevault_list_entities();

  return $content;
}

/**
 * Returns a render array with all filevault entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function filevault_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = filevault_load_multiple();

  if (!empty($entities)) {
    foreach ( $entities as $entity ) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id' => $entity->id,
          'Filename' => l($entity->filename, 'filevault/file/' . $entity->id),
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Item Description'))
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No filevault entities currently exist.'),
    );
  }
  return $content;
}

/**
 * Callback for a page title when this entity is displayed.
 */
function filevault_title($entity) {
  return t('@filename', array('@filename' => $entity->filename));
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function filevault_view($entity, $view_mode = 'embedded') {

  // Our entity type, for convenience.
  $entity_type = 'filevault';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );

  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);

  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->id => $entity));

  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language ;
  $langcode = $language->language ;

  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);

  // Now invoke hook_entity_view_alter().
  drupal_alter(array('filevault_view', 'entity_view'), $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}



/**
 * A handler to provide proper displays for dates.
 */
class filevault_views_handler_field_date extends views_handler_field {
  function option_definition() {
    $options = parent::option_definition();

    $options['date_format'] = array('default' => 'medium');

    return $options;
  }

  function options_form(&$form, &$form_state) {

    $date_formats = array();
    $date_types = system_get_date_types();
    foreach ($date_types as $key => $value) {
      $date_formats[$value['type']] = check_plain(t($value['title'] . ' format')) . ': ' . format_date(REQUEST_TIME, $value['type']);
    }

    $form['date_format'] = array(
      '#type' => 'select',
      '#title' => t('Date format'),
      '#options' => $date_formats,
      '#default_value' => isset($this->options['date_format']) ? $this->options['date_format'] : 'medium',
    );

    parent::options_form($form, $form_state);
  }

  function render($values) {

    $value = $this->get_value($values);
    $format = $this->options['date_format'];

    if ($value) {
      $donnee_formatee = format_date( $value, $format);
      return $donnee_formatee;
    }
  }
}

/**
 * A handler to provide proper displays for filesizes.
 */
class filevault_views_handler_field_size extends views_handler_field {
  function option_definition() {
    $options = parent::option_definition();

    $options['size_format'] = array('default' => 'mb');

    return $options;
  }

  function options_form(&$form, &$form_state) {

    $form['size_format'] = array(
      '#type' => 'select',
      '#title' => t('Size format'),
      '#options' => array(
          'bytes' => t('bytes'),
          'kb' => t('KB'),
          'mb' => t('MB'),
          'gb' => t('GB'),
          'dynamic' => t('Dynamic'),
       ),
      '#default_value' => isset($this->options['size_format']) ? $this->options['size_format'] : 'mb',
    );
    parent::options_form($form, $form_state);
  }

  function render($values) {

    $value = $this->get_value($values);
    $format = $this->options['size_format'];

    if ($value) {

      switch ($format) {

        case 'bytes':
          return $value." bytes";
          break;

        case 'kb':
          return round($value/1024)." KB";
          break;

        case 'mb':
          return round(($value/1048576),2)." MB";
          break;

        case 'gb':
          return round(($value/1073741824),2)." GB";
          break;

        case 'dynamic':
          if($value > 1073741824 )
          return round(($value/1073741824),2)." GB";

          if($value > 1048576 )
          return round(($value/1048576),2)." MB";

          return ceil($value/1024)." KB";
          break;

        default:
          return "Err: Calculating file size";
          break;
      };
    }
  }
}

/*
 * Attach above handlerer to the view using hook_views_data_alter
 */
function filevault_views_data_alter(&$data) {
  $data['filevault_files']['created']['field']['handler'] = 'filevault_views_handler_field_date';
  $data['filevault_files']['updated']['field']['handler'] = 'filevault_views_handler_field_date';
  $data['filevault_files']['size']['field']['handler'] = 'filevault_views_handler_field_size';
}
